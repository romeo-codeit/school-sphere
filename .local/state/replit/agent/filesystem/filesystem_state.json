{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# EduManage - School Management System\n\n## Overview\n\nEduManage is a comprehensive school management system built as a full-stack web application. The platform provides functionality for managing students, teachers, exams, payments, resources, and internal communications within an educational institution. The system features a modern React frontend with a Node.js/Express backend, utilizing PostgreSQL for data persistence and Replit's authentication system for user management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application uses **React 18** with TypeScript and modern development practices. Key architectural decisions include:\n\n- **Routing**: Wouter for lightweight client-side routing with page-based organization\n- **State Management**: TanStack Query for server state management, eliminating the need for complex global state solutions\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Build System**: Vite for fast development and optimized production builds\n\nThe frontend follows a feature-based organization with dedicated pages for dashboard, students, exams, payments, messages, resources, and settings.\n\n### Backend Architecture\nThe server-side application uses **Express.js** with TypeScript in ESM format. Core architectural patterns include:\n\n- **Database Layer**: Drizzle ORM for type-safe database operations with PostgreSQL\n- **Authentication**: Replit's OpenID Connect integration with session-based authentication\n- **API Design**: RESTful endpoints organized by resource type (students, teachers, exams, etc.)\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n- **Error Handling**: Centralized error handling middleware with structured error responses\n\nThe backend implements a storage abstraction layer that encapsulates all database operations, making the system easier to test and maintain.\n\n### Database Design\nThe system uses **PostgreSQL** as the primary database with the following key entity relationships:\n\n- **Users**: Central authentication table linked to specific roles (admin, teacher, student, parent)\n- **Students**: Detailed student profiles with academic and personal information\n- **Teachers**: Staff profiles with subject specializations and contact details\n- **Exams**: Question banks organized by type (JAMB, WAEC, NECO, internal) and subject\n- **Payments**: Financial transaction records with status tracking\n- **Messages**: Internal communication system supporting different recipient types\n- **Resources**: File and content management for educational materials\n- **Attendance & Grades**: Academic tracking and performance management\n\nThe schema uses UUIDs for primary keys and maintains referential integrity through foreign key constraints.\n\n### Authentication & Authorization\nThe system integrates with **Replit's authentication system** using OpenID Connect:\n\n- **Session Management**: Secure session storage in PostgreSQL with configurable TTL\n- **Role-Based Access**: Different user roles (admin, teacher, student, parent) with appropriate permissions\n- **Security**: HTTP-only cookies, CSRF protection, and secure session configuration\n- **User Provisioning**: Automatic user creation and profile management through OIDC claims\n\n### UI/UX Architecture\nThe interface uses a **component-driven design** with consistent patterns:\n\n- **Design System**: Custom theme built on Tailwind CSS with CSS custom properties\n- **Responsive Layout**: Mobile-first approach with collapsible sidebar navigation\n- **Component Library**: Reusable components following shadcn/ui patterns\n- **Accessibility**: ARIA compliance and keyboard navigation support\n- **Performance**: Code splitting and lazy loading for optimal bundle sizes\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver for database connectivity\n- **drizzle-orm**: Type-safe ORM for database operations and migrations\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight routing library for React\n- **express**: Web framework for the Node.js backend\n\n### Authentication & Security\n- **openid-client**: OpenID Connect client for Replit authentication integration\n- **passport**: Authentication middleware framework\n- **express-session**: Session management middleware\n- **connect-pg-simple**: PostgreSQL session store\n\n### UI & Styling\n- **@radix-ui/***: Unstyled, accessible UI component primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library with consistent design language\n\n### Development & Build Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Type safety and developer experience\n- **eslint & prettier**: Code quality and formatting\n- **drizzle-kit**: Database migration and introspection tools\n\n### Form Management & Validation\n- **react-hook-form**: Performant form library with minimal re-renders\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: Runtime type validation and schema definition\n- **drizzle-zod**: Integration between Drizzle schemas and Zod validation\n\nThe system is designed to be easily deployable on Replit's infrastructure while maintaining the flexibility to run in other environments with minimal configuration changes.","size_bytes":5576},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import type { RequestHandler } from \"express\";\nimport { storage } from \"./storage\";\n\nexport type UserRole = \"admin\" | \"teacher\" | \"student\" | \"parent\";\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    role: UserRole;\n    claims: any;\n  };\n}\n\n// Role-based authorization middleware\nexport const requireRole = (allowedRoles: UserRole[]): RequestHandler => {\n  return async (req: any, res, next) => {\n    try {\n      if (!req.isAuthenticated() || !req.user?.claims?.sub) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      if (!allowedRoles.includes(user.role as UserRole)) {\n        return res.status(403).json({ \n          message: \"Access denied\", \n          required: allowedRoles,\n          current: user.role \n        });\n      }\n\n      // Attach user info to request\n      req.user.id = user.id;\n      req.user.role = user.role;\n      \n      next();\n    } catch (error) {\n      console.error(\"Role authorization error:\", error);\n      res.status(500).json({ message: \"Authorization error\" });\n    }\n  };\n};\n\n// Resource ownership check for students/parents\nexport const requireOwnership = (resourceField: string = \"studentId\"): RequestHandler => {\n  return async (req: any, res, next) => {\n    try {\n      const user = req.user;\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      // Admins and teachers can access all resources\n      if (user.role === \"admin\" || user.role === \"teacher\") {\n        return next();\n      }\n\n      // Students can only access their own data\n      if (user.role === \"student\") {\n        const students = await storage.getStudents();\n        const studentRecord = students.find(s => s.userId === user.id);\n        \n        if (!studentRecord) {\n          return res.status(403).json({ message: \"Student record not found\" });\n        }\n\n        const resourceId = req.params.id || req.body[resourceField];\n        if (resourceId && resourceId !== studentRecord.id) {\n          return res.status(403).json({ message: \"Access denied - not your resource\" });\n        }\n      }\n\n      // Parents can only access their child's data\n      if (user.role === \"parent\") {\n        // For now, we'll implement a simple check - in a real system, \n        // you'd have a parent-child relationship table\n        const students = await storage.getStudents();\n        const childRecord = students.find(s => s.parentEmail === user.email);\n        \n        if (!childRecord) {\n          return res.status(403).json({ message: \"Child record not found\" });\n        }\n\n        const resourceId = req.params.id || req.body[resourceField];\n        if (resourceId && resourceId !== childRecord.id) {\n          return res.status(403).json({ message: \"Access denied - not your child's resource\" });\n        }\n      }\n\n      next();\n    } catch (error) {\n      console.error(\"Ownership check error:\", error);\n      res.status(500).json({ message: \"Authorization error\" });\n    }\n  };\n};\n\n// Permission definitions for different roles\nexport const permissions = {\n  admin: {\n    students: [\"create\", \"read\", \"update\", \"delete\"],\n    teachers: [\"create\", \"read\", \"update\", \"delete\"],\n    exams: [\"create\", \"read\", \"update\", \"delete\"],\n    payments: [\"create\", \"read\", \"update\", \"delete\"],\n    messages: [\"create\", \"read\", \"update\", \"delete\"],\n    resources: [\"create\", \"read\", \"update\", \"delete\"],\n    settings: [\"create\", \"read\", \"update\", \"delete\"],\n    attendance: [\"create\", \"read\", \"update\", \"delete\"],\n    grades: [\"create\", \"read\", \"update\", \"delete\"]\n  },\n  teacher: {\n    students: [\"read\", \"update\"], // Can view and update their assigned students\n    teachers: [\"read\"], // Can view other teachers\n    exams: [\"create\", \"read\", \"update\"], // Can create and manage exams\n    payments: [\"read\"], // Can view payment status\n    messages: [\"create\", \"read\", \"update\"],\n    resources: [\"create\", \"read\", \"update\"],\n    settings: [\"read\"], // Limited settings access\n    attendance: [\"create\", \"read\", \"update\"],\n    grades: [\"create\", \"read\", \"update\"]\n  },\n  student: {\n    students: [\"read\"], // Can only view their own profile\n    teachers: [\"read\"], // Can view teacher info\n    exams: [\"read\"], // Can take exams and view results\n    payments: [\"read\"], // Can view their payment status\n    messages: [\"create\", \"read\"],\n    resources: [\"read\"],\n    settings: [\"read\"], // Can view limited settings\n    attendance: [\"read\"], // Can view their attendance\n    grades: [\"read\"] // Can view their grades\n  },\n  parent: {\n    students: [\"read\"], // Can view their child's profile\n    teachers: [\"read\"], // Can view teacher info\n    exams: [\"read\"], // Can view child's exam results\n    payments: [\"read\"], // Can view child's payment status\n    messages: [\"create\", \"read\"],\n    resources: [\"read\"],\n    settings: [\"read\"], // Limited settings access\n    attendance: [\"read\"], // Can view child's attendance\n    grades: [\"read\"] // Can view child's grades\n  }\n};\n\nexport const hasPermission = (userRole: UserRole, resource: string, action: string): boolean => {\n  const rolePermissions = permissions[userRole];\n  if (!rolePermissions || !rolePermissions[resource]) {\n    return false;\n  }\n  return rolePermissions[resource].includes(action);\n};","size_bytes":5468},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDemoUsers } from \"./seed\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Seed demo users in development\n  if (app.get(\"env\") === \"development\") {\n    await seedDemoUsers();\n  }\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2218},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { requireRole, requireOwnership } from \"./auth\";\nimport { insertStudentSchema, insertTeacherSchema, insertExamSchema, insertPaymentSchema, insertResourceSchema, insertMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', isAuthenticated, requireRole([\"admin\", \"teacher\", \"student\", \"parent\"]), async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Student routes\n  app.get('/api/students', isAuthenticated, requireRole([\"admin\", \"teacher\"]), async (req, res) => {\n    try {\n      const students = await storage.getStudents();\n      res.json(students);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      res.status(500).json({ message: \"Failed to fetch students\" });\n    }\n  });\n\n  app.get('/api/students/:id', isAuthenticated, requireRole([\"admin\", \"teacher\", \"student\", \"parent\"]), requireOwnership(), async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      console.error(\"Error fetching student:\", error);\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  app.post('/api/students', isAuthenticated, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const validatedData = insertStudentSchema.parse(req.body);\n      const student = await storage.createStudent(validatedData);\n      res.status(201).json(student);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating student:\", error);\n      res.status(500).json({ message: \"Failed to create student\" });\n    }\n  });\n\n  app.put('/api/students/:id', isAuthenticated, requireRole([\"admin\", \"teacher\"]), requireOwnership(), async (req, res) => {\n    try {\n      const validatedData = insertStudentSchema.partial().parse(req.body);\n      const student = await storage.updateStudent(req.params.id, validatedData);\n      res.json(student);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error updating student:\", error);\n      res.status(500).json({ message: \"Failed to update student\" });\n    }\n  });\n\n  app.delete('/api/students/:id', isAuthenticated, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      await storage.deleteStudent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting student:\", error);\n      res.status(500).json({ message: \"Failed to delete student\" });\n    }\n  });\n\n  // Teacher routes\n  app.get('/api/teachers', isAuthenticated, requireRole([\"admin\", \"teacher\", \"student\", \"parent\"]), async (req, res) => {\n    try {\n      const teachers = await storage.getTeachers();\n      res.json(teachers);\n    } catch (error) {\n      console.error(\"Error fetching teachers:\", error);\n      res.status(500).json({ message: \"Failed to fetch teachers\" });\n    }\n  });\n\n  app.post('/api/teachers', isAuthenticated, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const validatedData = insertTeacherSchema.parse(req.body);\n      const teacher = await storage.createTeacher(validatedData);\n      res.status(201).json(teacher);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating teacher:\", error);\n      res.status(500).json({ message: \"Failed to create teacher\" });\n    }\n  });\n\n  // Exam routes\n  app.get('/api/exams', isAuthenticated, requireRole([\"admin\", \"teacher\", \"student\", \"parent\"]), async (req, res) => {\n    try {\n      const { type } = req.query;\n      const exams = type \n        ? await storage.getExamsByType(type as string)\n        : await storage.getExams();\n      res.json(exams);\n    } catch (error) {\n      console.error(\"Error fetching exams:\", error);\n      res.status(500).json({ message: \"Failed to fetch exams\" });\n    }\n  });\n\n  app.get('/api/exams/:id', isAuthenticated, requireRole([\"admin\", \"teacher\", \"student\", \"parent\"]), async (req, res) => {\n    try {\n      const exam = await storage.getExam(req.params.id);\n      if (!exam) {\n        return res.status(404).json({ message: \"Exam not found\" });\n      }\n      res.json(exam);\n    } catch (error) {\n      console.error(\"Error fetching exam:\", error);\n      res.status(500).json({ message: \"Failed to fetch exam\" });\n    }\n  });\n\n  app.post('/api/exams', isAuthenticated, requireRole([\"admin\", \"teacher\"]), async (req: any, res) => {\n    try {\n      const validatedData = insertExamSchema.parse({\n        ...req.body,\n        createdBy: req.user.claims.sub,\n      });\n      const exam = await storage.createExam(validatedData);\n      res.status(201).json(exam);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating exam:\", error);\n      res.status(500).json({ message: \"Failed to create exam\" });\n    }\n  });\n\n  app.post('/api/exams/:id/attempt', isAuthenticated, requireRole([\"student\"]), async (req: any, res) => {\n    try {\n      // Find student by user ID\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'student') {\n        return res.status(403).json({ message: \"Only students can take exams\" });\n      }\n\n      // Find student record\n      const students = await storage.getStudents();\n      const student = students.find(s => s.userId === user.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student record not found\" });\n      }\n\n      const attempt = await storage.createExamAttempt({\n        examId: req.params.id,\n        studentId: student.id,\n        answers: req.body.answers,\n        score: req.body.score,\n        totalQuestions: req.body.totalQuestions,\n        correctAnswers: req.body.correctAnswers,\n        timeSpent: req.body.timeSpent,\n        completedAt: new Date(),\n      });\n\n      res.status(201).json(attempt);\n    } catch (error) {\n      console.error(\"Error submitting exam attempt:\", error);\n      res.status(500).json({ message: \"Failed to submit exam attempt\" });\n    }\n  });\n\n  // Payment routes\n  app.get('/api/payments', isAuthenticated, requireRole([\"admin\", \"student\", \"parent\"]), async (req, res) => {\n    try {\n      const payments = await storage.getPayments();\n      res.json(payments);\n    } catch (error) {\n      console.error(\"Error fetching payments:\", error);\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post('/api/payments', isAuthenticated, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const validatedData = insertPaymentSchema.parse(req.body);\n      const payment = await storage.createPayment(validatedData);\n      res.status(201).json(payment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating payment:\", error);\n      res.status(500).json({ message: \"Failed to create payment\" });\n    }\n  });\n\n  // Message routes\n  app.get('/api/messages', isAuthenticated, requireRole([\"admin\", \"teacher\", \"student\", \"parent\"]), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const messages = await storage.getMessages(userId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post('/api/messages', isAuthenticated, requireRole([\"admin\", \"teacher\", \"student\", \"parent\"]), async (req: any, res) => {\n    try {\n      const validatedData = insertMessageSchema.parse({\n        ...req.body,\n        senderId: req.user.claims.sub,\n      });\n      const message = await storage.sendMessage(validatedData);\n      res.status(201).json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Resource routes\n  app.get('/api/resources', isAuthenticated, requireRole([\"admin\", \"teacher\", \"student\", \"parent\"]), async (req, res) => {\n    try {\n      const resources = await storage.getResources();\n      res.json(resources);\n    } catch (error) {\n      console.error(\"Error fetching resources:\", error);\n      res.status(500).json({ message: \"Failed to fetch resources\" });\n    }\n  });\n\n  app.post('/api/resources', isAuthenticated, requireRole([\"admin\", \"teacher\"]), async (req: any, res) => {\n    try {\n      const validatedData = insertResourceSchema.parse({\n        ...req.body,\n        uploadedBy: req.user.claims.sub,\n      });\n      const resource = await storage.createResource(validatedData);\n      res.status(201).json(resource);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating resource:\", error);\n      res.status(500).json({ message: \"Failed to create resource\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10557},"server/seed.ts":{"content":"import { storage } from \"./storage\";\n\nexport async function seedDemoUsers() {\n  console.log(\"Seeding demo users...\");\n\n  try {\n    // Create demo admin user\n    await storage.upsertUser({\n      id: \"demo-admin-001\",\n      email: \"admin@edumanage.school\",\n      firstName: \"John\",\n      lastName: \"Administrator\",\n      role: \"admin\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face\"\n    });\n\n    // Create demo teacher user\n    await storage.upsertUser({\n      id: \"demo-teacher-001\", \n      email: \"teacher@edumanage.school\",\n      firstName: \"Sarah\",\n      lastName: \"Wilson\",\n      role: \"teacher\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1494790108755-2616b2e8983c?w=100&h=100&fit=crop&crop=face\"\n    });\n\n    // Create demo student user\n    await storage.upsertUser({\n      id: \"demo-student-001\",\n      email: \"student@edumanage.school\", \n      firstName: \"Michael\",\n      lastName: \"Johnson\",\n      role: \"student\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1539571696358-61e2a4c7763d?w=100&h=100&fit=crop&crop=face\"\n    });\n\n    // Create demo parent user\n    await storage.upsertUser({\n      id: \"demo-parent-001\",\n      email: \"parent@edumanage.school\",\n      firstName: \"Maria\",\n      lastName: \"Garcia\", \n      role: \"parent\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face\"\n    });\n\n    // Create demo teacher record\n    await storage.createTeacher({\n      userId: \"demo-teacher-001\",\n      employeeId: \"T001\",\n      firstName: \"Sarah\",\n      lastName: \"Wilson\",\n      email: \"teacher@edumanage.school\",\n      phone: \"+1-555-0123\",\n      subjects: [\"Mathematics\", \"Physics\"],\n      qualification: \"M.Sc. Mathematics\",\n      experience: 8,\n      status: \"active\"\n    });\n\n    // Create demo student record\n    await storage.createStudent({\n      userId: \"demo-student-001\",\n      studentId: \"S001\",\n      firstName: \"Michael\",\n      lastName: \"Johnson\",\n      email: \"student@edumanage.school\",\n      phone: \"+1-555-0124\",\n      dateOfBirth: new Date(\"2005-03-15\"),\n      address: \"123 Student Street, Education City\",\n      parentName: \"Maria Garcia\",\n      parentPhone: \"+1-555-0125\",\n      parentEmail: \"parent@edumanage.school\",\n      class: \"SS3\",\n      status: \"active\"\n    });\n\n    // Create demo exam\n    await storage.createExam({\n      title: \"JAMB Mathematics Practice Test\",\n      type: \"jamb\",\n      subject: \"Mathematics\",\n      questions: [\n        {\n          id: 1,\n          question: \"What is the value of x in the equation 2x + 5 = 15?\",\n          options: [\"A) 5\", \"B) 10\", \"C) 7.5\", \"D) 2.5\"],\n          correct: 0,\n          explanation: \"2x + 5 = 15, so 2x = 10, therefore x = 5\"\n        },\n        {\n          id: 2,\n          question: \"If a triangle has angles 60°, 60°, and 60°, what type of triangle is it?\",\n          options: [\"A) Scalene\", \"B) Isosceles\", \"C) Equilateral\", \"D) Right-angled\"],\n          correct: 2,\n          explanation: \"All angles are equal (60°), making it an equilateral triangle\"\n        }\n      ],\n      duration: 120,\n      totalMarks: 100,\n      passingMarks: 50,\n      createdBy: \"demo-teacher-001\",\n      isActive: true\n    });\n\n    // Create demo payment\n    const students = await storage.getStudents();\n    if (students.length > 0) {\n      await storage.createPayment({\n        studentId: students[0].id,\n        amount: \"50000.00\",\n        purpose: \"School Fees - Term 1\",\n        dueDate: new Date(\"2024-01-31\"),\n        status: \"pending\",\n        term: \"First Term\",\n        academicYear: \"2023/2024\"\n      });\n    }\n\n    // Create demo resource\n    await storage.createResource({\n      title: \"Mathematics Formulas Guide\",\n      description: \"Comprehensive guide covering all JAMB mathematics formulas\",\n      type: \"pdf\",\n      subject: \"Mathematics\",\n      class: \"SS3\",\n      fileUrl: \"https://example.com/math-formulas.pdf\",\n      fileSize: 2048000,\n      uploadedBy: \"demo-teacher-001\",\n      isPublic: true\n    });\n\n    console.log(\"Demo users seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding demo users:\", error);\n  }\n}","size_bytes":4208},"server/storage.ts":{"content":"import {\n  users,\n  students,\n  teachers,\n  exams,\n  payments,\n  attendance,\n  messages,\n  resources,\n  grades,\n  examAttempts,\n  type User,\n  type UpsertUser,\n  type Student,\n  type InsertStudent,\n  type Teacher,\n  type InsertTeacher,\n  type Exam,\n  type InsertExam,\n  type Payment,\n  type InsertPayment,\n  type Resource,\n  type InsertResource,\n  type Message,\n  type InsertMessage,\n  type Grade,\n  type InsertGrade,\n  type Attendance,\n  type ExamAttempt,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, gte, lte, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Student operations\n  getStudents(): Promise<Student[]>;\n  getStudent(id: string): Promise<Student | undefined>;\n  getStudentByStudentId(studentId: string): Promise<Student | undefined>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student>;\n  deleteStudent(id: string): Promise<void>;\n\n  // Teacher operations\n  getTeachers(): Promise<Teacher[]>;\n  getTeacher(id: string): Promise<Teacher | undefined>;\n  createTeacher(teacher: InsertTeacher): Promise<Teacher>;\n  updateTeacher(id: string, teacher: Partial<InsertTeacher>): Promise<Teacher>;\n\n  // Exam operations\n  getExams(): Promise<Exam[]>;\n  getExam(id: string): Promise<Exam | undefined>;\n  getExamsByType(type: string): Promise<Exam[]>;\n  createExam(exam: InsertExam): Promise<Exam>;\n  updateExam(id: string, exam: Partial<InsertExam>): Promise<Exam>;\n  deleteExam(id: string): Promise<void>;\n\n  // Exam attempt operations\n  getExamAttempts(studentId: string): Promise<ExamAttempt[]>;\n  createExamAttempt(attempt: any): Promise<ExamAttempt>;\n\n  // Payment operations\n  getPayments(): Promise<Payment[]>;\n  getPaymentsByStudent(studentId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment>;\n\n  // Attendance operations\n  getAttendanceByStudent(studentId: string): Promise<Attendance[]>;\n  markAttendance(attendance: any): Promise<Attendance>;\n\n  // Message operations\n  getMessages(userId: string): Promise<Message[]>;\n  sendMessage(message: InsertMessage): Promise<Message>;\n  markMessageAsRead(id: string): Promise<void>;\n\n  // Resource operations\n  getResources(): Promise<Resource[]>;\n  getResource(id: string): Promise<Resource | undefined>;\n  createResource(resource: InsertResource): Promise<Resource>;\n  updateResource(id: string, resource: Partial<InsertResource>): Promise<Resource>;\n  deleteResource(id: string): Promise<void>;\n\n  // Grade operations\n  getGradesByStudent(studentId: string): Promise<Grade[]>;\n  createGrade(grade: InsertGrade): Promise<Grade>;\n\n  // Dashboard statistics\n  getDashboardStats(): Promise<{\n    totalStudents: number;\n    activeTeachers: number;\n    pendingPayments: string;\n    averageAttendance: string;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Student operations\n  async getStudents(): Promise<Student[]> {\n    return await db.select().from(students).orderBy(desc(students.createdAt));\n  }\n\n  async getStudent(id: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.id, id));\n    return student;\n  }\n\n  async getStudentByStudentId(studentId: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.studentId, studentId));\n    return student;\n  }\n\n  async createStudent(student: InsertStudent): Promise<Student> {\n    const [newStudent] = await db.insert(students).values(student).returning();\n    return newStudent;\n  }\n\n  async updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student> {\n    const [updatedStudent] = await db\n      .update(students)\n      .set({ ...student, updatedAt: new Date() })\n      .where(eq(students.id, id))\n      .returning();\n    return updatedStudent;\n  }\n\n  async deleteStudent(id: string): Promise<void> {\n    await db.delete(students).where(eq(students.id, id));\n  }\n\n  // Teacher operations\n  async getTeachers(): Promise<Teacher[]> {\n    return await db.select().from(teachers).orderBy(desc(teachers.createdAt));\n  }\n\n  async getTeacher(id: string): Promise<Teacher | undefined> {\n    const [teacher] = await db.select().from(teachers).where(eq(teachers.id, id));\n    return teacher;\n  }\n\n  async createTeacher(teacher: InsertTeacher): Promise<Teacher> {\n    const [newTeacher] = await db.insert(teachers).values(teacher).returning();\n    return newTeacher;\n  }\n\n  async updateTeacher(id: string, teacher: Partial<InsertTeacher>): Promise<Teacher> {\n    const [updatedTeacher] = await db\n      .update(teachers)\n      .set({ ...teacher, updatedAt: new Date() })\n      .where(eq(teachers.id, id))\n      .returning();\n    return updatedTeacher;\n  }\n\n  // Exam operations\n  async getExams(): Promise<Exam[]> {\n    return await db.select().from(exams).orderBy(desc(exams.createdAt));\n  }\n\n  async getExam(id: string): Promise<Exam | undefined> {\n    const [exam] = await db.select().from(exams).where(eq(exams.id, id));\n    return exam;\n  }\n\n  async getExamsByType(type: string): Promise<Exam[]> {\n    return await db.select().from(exams).where(eq(exams.type, type));\n  }\n\n  async createExam(exam: InsertExam): Promise<Exam> {\n    const [newExam] = await db.insert(exams).values(exam).returning();\n    return newExam;\n  }\n\n  async updateExam(id: string, exam: Partial<InsertExam>): Promise<Exam> {\n    const [updatedExam] = await db\n      .update(exams)\n      .set({ ...exam, updatedAt: new Date() })\n      .where(eq(exams.id, id))\n      .returning();\n    return updatedExam;\n  }\n\n  async deleteExam(id: string): Promise<void> {\n    await db.delete(exams).where(eq(exams.id, id));\n  }\n\n  // Exam attempt operations\n  async getExamAttempts(studentId: string): Promise<ExamAttempt[]> {\n    return await db.select().from(examAttempts).where(eq(examAttempts.studentId, studentId));\n  }\n\n  async createExamAttempt(attempt: any): Promise<ExamAttempt> {\n    const [newAttempt] = await db.insert(examAttempts).values(attempt).returning();\n    return newAttempt;\n  }\n\n  // Payment operations\n  async getPayments(): Promise<Payment[]> {\n    return await db.select().from(payments).orderBy(desc(payments.createdAt));\n  }\n\n  async getPaymentsByStudent(studentId: string): Promise<Payment[]> {\n    return await db.select().from(payments).where(eq(payments.studentId, studentId));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db.insert(payments).values(payment).returning();\n    return newPayment;\n  }\n\n  async updatePayment(id: string, payment: Partial<InsertPayment>): Promise<Payment> {\n    const [updatedPayment] = await db\n      .update(payments)\n      .set({ ...payment, updatedAt: new Date() })\n      .where(eq(payments.id, id))\n      .returning();\n    return updatedPayment;\n  }\n\n  // Attendance operations\n  async getAttendanceByStudent(studentId: string): Promise<Attendance[]> {\n    return await db.select().from(attendance).where(eq(attendance.studentId, studentId));\n  }\n\n  async markAttendance(attendanceData: any): Promise<Attendance> {\n    const [newAttendance] = await db.insert(attendance).values(attendanceData).returning();\n    return newAttendance;\n  }\n\n  // Message operations\n  async getMessages(userId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(or(eq(messages.senderId, userId), eq(messages.recipientId, userId)))\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async sendMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(message).returning();\n    return newMessage;\n  }\n\n  async markMessageAsRead(id: string): Promise<void> {\n    await db.update(messages).set({ isRead: true }).where(eq(messages.id, id));\n  }\n\n  // Resource operations\n  async getResources(): Promise<Resource[]> {\n    return await db.select().from(resources).orderBy(desc(resources.createdAt));\n  }\n\n  async getResource(id: string): Promise<Resource | undefined> {\n    const [resource] = await db.select().from(resources).where(eq(resources.id, id));\n    return resource;\n  }\n\n  async createResource(resource: InsertResource): Promise<Resource> {\n    const [newResource] = await db.insert(resources).values(resource).returning();\n    return newResource;\n  }\n\n  async updateResource(id: string, resource: Partial<InsertResource>): Promise<Resource> {\n    const [updatedResource] = await db\n      .update(resources)\n      .set({ ...resource, updatedAt: new Date() })\n      .where(eq(resources.id, id))\n      .returning();\n    return updatedResource;\n  }\n\n  async deleteResource(id: string): Promise<void> {\n    await db.delete(resources).where(eq(resources.id, id));\n  }\n\n  // Grade operations\n  async getGradesByStudent(studentId: string): Promise<Grade[]> {\n    return await db.select().from(grades).where(eq(grades.studentId, studentId));\n  }\n\n  async createGrade(grade: InsertGrade): Promise<Grade> {\n    const [newGrade] = await db.insert(grades).values(grade).returning();\n    return newGrade;\n  }\n\n  // Dashboard statistics\n  async getDashboardStats(): Promise<{\n    totalStudents: number;\n    activeTeachers: number;\n    pendingPayments: string;\n    averageAttendance: string;\n  }> {\n    const [studentCount] = await db.select({ count: count() }).from(students);\n    const [teacherCount] = await db.select({ count: count() }).from(teachers).where(eq(teachers.status, 'active'));\n    \n    const [pendingPaymentSum] = await db\n      .select({ sum: sql<string>`COALESCE(SUM(${payments.amount}), 0)` })\n      .from(payments)\n      .where(eq(payments.status, 'pending'));\n\n    // Calculate average attendance for the last 30 days\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    \n    const [attendanceStats] = await db\n      .select({\n        total: count(),\n        present: sql<number>`SUM(CASE WHEN ${attendance.status} = 'present' THEN 1 ELSE 0 END)`,\n      })\n      .from(attendance)\n      .where(gte(attendance.date, thirtyDaysAgo));\n\n    const averageAttendance = attendanceStats?.total > 0 \n      ? ((attendanceStats.present / attendanceStats.total) * 100).toFixed(1)\n      : \"0.0\";\n\n    return {\n      totalStudents: studentCount.count,\n      activeTeachers: teacherCount.count,\n      pendingPayments: `₦${parseFloat(pendingPaymentSum.sum || \"0\").toLocaleString()}`,\n      averageAttendance: `${averageAttendance}%`,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11268},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\", { enum: [\"admin\", \"teacher\", \"student\", \"parent\"] }).notNull().default(\"student\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Students table\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  studentId: varchar(\"student_id\").unique().notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  address: text(\"address\"),\n  parentName: varchar(\"parent_name\"),\n  parentPhone: varchar(\"parent_phone\"),\n  parentEmail: varchar(\"parent_email\"),\n  class: varchar(\"class\").notNull(),\n  enrollmentDate: timestamp(\"enrollment_date\").defaultNow(),\n  status: varchar(\"status\", { enum: [\"active\", \"inactive\", \"suspended\"] }).default(\"active\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Teachers table\nexport const teachers = pgTable(\"teachers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  employeeId: varchar(\"employee_id\").unique().notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  subjects: text(\"subjects\").array(),\n  qualification: varchar(\"qualification\"),\n  experience: integer(\"experience\"),\n  status: varchar(\"status\", { enum: [\"active\", \"inactive\"] }).default(\"active\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Exams table\nexport const exams = pgTable(\"exams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  type: varchar(\"type\", { enum: [\"jamb\", \"waec\", \"neco\", \"internal\"] }).notNull(),\n  subject: varchar(\"subject\").notNull(),\n  questions: jsonb(\"questions\").notNull(),\n  duration: integer(\"duration\"), // in minutes\n  totalMarks: integer(\"total_marks\"),\n  passingMarks: integer(\"passing_marks\"),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Exam attempts table\nexport const examAttempts = pgTable(\"exam_attempts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  examId: varchar(\"exam_id\").references(() => exams.id),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  answers: jsonb(\"answers\"),\n  score: integer(\"score\"),\n  totalQuestions: integer(\"total_questions\"),\n  correctAnswers: integer(\"correct_answers\"),\n  timeSpent: integer(\"time_spent\"), // in minutes\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payments table\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  purpose: varchar(\"purpose\").notNull(),\n  dueDate: timestamp(\"due_date\"),\n  paidDate: timestamp(\"paid_date\"),\n  status: varchar(\"status\", { enum: [\"pending\", \"paid\", \"overdue\", \"cancelled\"] }).default(\"pending\"),\n  paymentMethod: varchar(\"payment_method\"),\n  transactionId: varchar(\"transaction_id\"),\n  term: varchar(\"term\"),\n  academicYear: varchar(\"academic_year\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Attendance table\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  date: timestamp(\"date\").notNull(),\n  status: varchar(\"status\", { enum: [\"present\", \"absent\", \"late\", \"excused\"] }).notNull(),\n  remarks: text(\"remarks\"),\n  markedBy: varchar(\"marked_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").references(() => users.id),\n  recipientId: varchar(\"recipient_id\").references(() => users.id),\n  subject: varchar(\"subject\"),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  messageType: varchar(\"message_type\", { enum: [\"personal\", \"announcement\", \"notification\"] }).default(\"personal\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Resources table\nexport const resources = pgTable(\"resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\", { enum: [\"pdf\", \"video\", \"audio\", \"link\", \"image\"] }).notNull(),\n  subject: varchar(\"subject\"),\n  class: varchar(\"class\"),\n  fileUrl: varchar(\"file_url\"),\n  fileSize: integer(\"file_size\"),\n  downloads: integer(\"downloads\").default(0),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id),\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Grades table\nexport const grades = pgTable(\"grades\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  subject: varchar(\"subject\").notNull(),\n  examType: varchar(\"exam_type\"),\n  score: decimal(\"score\", { precision: 5, scale: 2 }),\n  totalMarks: decimal(\"total_marks\", { precision: 5, scale: 2 }),\n  grade: varchar(\"grade\"),\n  term: varchar(\"term\"),\n  academicYear: varchar(\"academic_year\"),\n  teacherId: varchar(\"teacher_id\").references(() => teachers.id),\n  remarks: text(\"remarks\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  students: many(students),\n  teachers: many(teachers),\n  messagesSent: many(messages, { relationName: \"sender\" }),\n  messagesReceived: many(messages, { relationName: \"recipient\" }),\n  resources: many(resources),\n  exams: many(exams),\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  user: one(users, {\n    fields: [students.userId],\n    references: [users.id],\n  }),\n  payments: many(payments),\n  attendance: many(attendance),\n  examAttempts: many(examAttempts),\n  grades: many(grades),\n}));\n\nexport const teachersRelations = relations(teachers, ({ one, many }) => ({\n  user: one(users, {\n    fields: [teachers.userId],\n    references: [users.id],\n  }),\n  grades: many(grades),\n}));\n\nexport const examsRelations = relations(exams, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [exams.createdBy],\n    references: [users.id],\n  }),\n  attempts: many(examAttempts),\n}));\n\nexport const examAttemptsRelations = relations(examAttempts, ({ one }) => ({\n  exam: one(exams, {\n    fields: [examAttempts.examId],\n    references: [exams.id],\n  }),\n  student: one(students, {\n    fields: [examAttempts.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  student: one(students, {\n    fields: [payments.studentId],\n    references: [students.id],\n  }),\n}));\n\nexport const attendanceRelations = relations(attendance, ({ one }) => ({\n  student: one(students, {\n    fields: [attendance.studentId],\n    references: [students.id],\n  }),\n  markedBy: one(users, {\n    fields: [attendance.markedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sender\",\n  }),\n  recipient: one(users, {\n    fields: [messages.recipientId],\n    references: [users.id],\n    relationName: \"recipient\",\n  }),\n}));\n\nexport const resourcesRelations = relations(resources, ({ one }) => ({\n  uploader: one(users, {\n    fields: [resources.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const gradesRelations = relations(grades, ({ one }) => ({\n  student: one(students, {\n    fields: [grades.studentId],\n    references: [students.id],\n  }),\n  teacher: one(teachers, {\n    fields: [grades.teacherId],\n    references: [teachers.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeacherSchema = createInsertSchema(teachers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertExamSchema = createInsertSchema(exams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGradeSchema = createInsertSchema(grades).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type Student = typeof students.$inferSelect;\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\nexport type Teacher = typeof teachers.$inferSelect;\nexport type InsertExam = z.infer<typeof insertExamSchema>;\nexport type Exam = typeof exams.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type Resource = typeof resources.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertGrade = z.infer<typeof insertGradeSchema>;\nexport type Grade = typeof grades.$inferSelect;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type ExamAttempt = typeof examAttempts.$inferSelect;\n","size_bytes":11461},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Students from \"@/pages/students\";\nimport Exams from \"@/pages/exams\";\nimport Payments from \"@/pages/payments\";\nimport Messages from \"@/pages/messages\";\nimport Resources from \"@/pages/resources\";\nimport Settings from \"@/pages/settings\";\nimport { useState } from \"react\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      {/* Desktop Sidebar */}\n      <Sidebar className=\"hidden lg:block\" />\n      \n      {/* Mobile Sidebar Overlay */}\n      {sidebarOpen && (\n        <div className=\"fixed inset-0 bg-foreground/50 backdrop-blur-sm z-50 lg:hidden\">\n          <div className=\"fixed left-0 top-0 h-full w-64 transform transition-transform duration-300\">\n            <Sidebar />\n            <button\n              className=\"absolute top-4 right-4 p-2 rounded-lg hover:bg-muted z-10\"\n              onClick={() => setSidebarOpen(false)}\n              data-testid=\"button-close-mobile-nav\"\n            >\n              <span className=\"sr-only\">Close sidebar</span>\n              ✕\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-auto\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/students\" component={Students} />\n          <Route path=\"/exams\" component={Exams} />\n          <Route path=\"/progress\" component={() => <div className=\"p-6\">Progress page coming soon...</div>} />\n          <Route path=\"/payments\" component={Payments} />\n          <Route path=\"/messages\" component={Messages} />\n          <Route path=\"/resources\" component={Resources} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2759},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(20, 90%, 48%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(42.0, 92.8%, 56.3%);\n  --chart-4: hsl(147.1, 78.5%, 41.9%);\n  --chart-5: hsl(341.5, 75.2%, 50.9%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(211.6, 51.4%, 92.7%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(205.0, 25.0%, 90.6%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 2px 4px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 4px 6px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 8px 10px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.7%, 91.2%);\n  --card: hsl(228, 9.8%, 10%);\n  --card-foreground: hsl(0, 0%, 85.1%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.7%, 91.2%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(0, 0%, 9.4%);\n  --muted-foreground: hsl(210, 3.4%, 46.3%);\n  --accent: hsl(20, 90%, 48%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(210, 5.3%, 14.9%);\n  --input: hsl(207.7, 27.7%, 18.4%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(42.0, 92.8%, 56.3%);\n  --chart-4: hsl(147.1, 78.5%, 41.9%);\n  --chart-5: hsl(341.5, 75.2%, 50.9%);\n  --sidebar: hsl(228, 9.8%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.1%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(205.7, 70%, 7.8%);\n  --sidebar-accent-foreground: hsl(221, 83%, 53%);\n  --sidebar-border: hsl(205.7, 15.8%, 26.1%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 1px 2px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 2px 4px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 4px 6px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00), 0px 8px 10px -1px hsl(221, 83%, 53%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221, 83%, 53%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n.glass-effect {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.sidebar-item:hover {\n  background: rgba(59, 130, 246, 0.1);\n  border-left: 3px solid var(--primary);\n}\n\n.chart-container {\n  background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);\n}\n","size_bytes":4817},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/RoleGuard.tsx":{"content":"import { useRole, type UserRole } from \"@/hooks/useRole\";\nimport { ReactNode } from \"react\";\n\ninterface RoleGuardProps {\n  allowedRoles?: UserRole[];\n  resource?: string;\n  action?: string;\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\nexport function RoleGuard({ \n  allowedRoles, \n  resource, \n  action, \n  children, \n  fallback = null \n}: RoleGuardProps) {\n  const { canAccess, hasPermission } = useRole();\n\n  // Check role-based access\n  if (allowedRoles && !canAccess(allowedRoles)) {\n    return <>{fallback}</>;\n  }\n\n  // Check permission-based access\n  if (resource && action && !hasPermission(resource as any, action)) {\n    return <>{fallback}</>;\n  }\n\n  return <>{children}</>;\n}\n\n// Convenience components for common role checks\nexport function AdminOnly({ children, fallback = null }: { children: ReactNode; fallback?: ReactNode }) {\n  return (\n    <RoleGuard allowedRoles={[\"admin\"]} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\nexport function TeacherOnly({ children, fallback = null }: { children: ReactNode; fallback?: ReactNode }) {\n  return (\n    <RoleGuard allowedRoles={[\"teacher\"]} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\nexport function StudentOnly({ children, fallback = null }: { children: ReactNode; fallback?: ReactNode }) {\n  return (\n    <RoleGuard allowedRoles={[\"student\"]} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\nexport function ParentOnly({ children, fallback = null }: { children: ReactNode; fallback?: ReactNode }) {\n  return (\n    <RoleGuard allowedRoles={[\"parent\"]} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\nexport function AdminOrTeacher({ children, fallback = null }: { children: ReactNode; fallback?: ReactNode }) {\n  return (\n    <RoleGuard allowedRoles={[\"admin\", \"teacher\"]} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}","size_bytes":1867},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard, \n  Users, \n  FileText, \n  TrendingUp, \n  CreditCard, \n  MessageSquare, \n  BookOpen, \n  Settings, \n  LogOut,\n  GraduationCap,\n  UserCheck,\n  ClipboardList\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useRole } from \"@/hooks/useRole\";\nimport { RoleGuard } from \"@/components/RoleGuard\";\n\nconst getNavigationItems = (role: string | null) => {\n  const baseItems = [\n    { \n      name: \"Dashboard\", \n      href: \"/\", \n      icon: LayoutDashboard, \n      exact: true,\n      roles: [\"admin\", \"teacher\", \"student\", \"parent\"],\n      badge: undefined\n    },\n  ];\n\n  const adminItems = [\n    { \n      name: \"Students\", \n      href: \"/students\", \n      icon: Users,\n      roles: [\"admin\", \"teacher\"]\n    },\n    { \n      name: \"Teachers\", \n      href: \"/teachers\", \n      icon: UserCheck,\n      roles: [\"admin\"]\n    },\n  ];\n\n  const examItems = [\n    { \n      name: \"Exams\", \n      href: \"/exams\", \n      icon: FileText,\n      roles: [\"admin\", \"teacher\", \"student\", \"parent\"]\n    },\n  ];\n\n  const progressItems = [\n    { \n      name: \"Progress\", \n      href: \"/progress\", \n      icon: TrendingUp,\n      roles: [\"admin\", \"teacher\", \"student\", \"parent\"]\n    },\n    { \n      name: \"Attendance\", \n      href: \"/attendance\", \n      icon: ClipboardList,\n      roles: [\"admin\", \"teacher\", \"student\", \"parent\"]\n    },\n  ];\n\n  const paymentItems = [\n    { \n      name: \"Payments\", \n      href: \"/payments\", \n      icon: CreditCard,\n      roles: [\"admin\", \"student\", \"parent\"]\n    },\n  ];\n\n  const communicationItems = [\n    { \n      name: \"Messages\", \n      href: \"/messages\", \n      icon: MessageSquare,\n      badge: 3,\n      roles: [\"admin\", \"teacher\", \"student\", \"parent\"],\n      exact: false\n    },\n    { \n      name: \"Resources\", \n      href: \"/resources\", \n      icon: BookOpen,\n      roles: [\"admin\", \"teacher\", \"student\", \"parent\"]\n    },\n  ];\n\n  const allItems = [...baseItems, ...adminItems, ...examItems, ...progressItems, ...paymentItems, ...communicationItems].map(item => ({\n    ...item,\n    exact: item.exact || false,\n    badge: item.badge || undefined\n  }));\n  \n  return allItems.filter(item => role && item.roles.includes(role));\n};\n\nconst getSettingsItems = (role: string | null) => {\n  return [\n    { \n      name: \"Settings\", \n      href: \"/settings\", \n      icon: Settings,\n      roles: [\"admin\", \"teacher\", \"student\", \"parent\"]\n    },\n  ].filter(item => role && item.roles.includes(role));\n};\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport function Sidebar({ className }: SidebarProps) {\n  const [location] = useLocation();\n  const { role } = useRole();\n  \n  const navigationItems = getNavigationItems(role);\n  const settingsItems = getSettingsItems(role);\n\n  const isActive = (href: string, exact = false) => {\n    if (exact) {\n      return location === href;\n    }\n    return location.startsWith(href);\n  };\n\n  return (\n    <aside className={cn(\"w-64 bg-card shadow-lg border-r border-border\", className)}>\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <GraduationCap className=\"text-primary-foreground text-xl\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\">EduManage</h1>\n            <p className=\"text-sm text-muted-foreground\">School Portal</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"px-4 pb-4\">\n        <div className=\"space-y-2\">\n          {navigationItems.map((item) => (\n            <Link \n              key={item.name} \n              href={item.href}\n              className={cn(\n                \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200\",\n                isActive(item.href, item.exact)\n                  ? \"bg-primary/10 text-primary border-l-3 border-primary\"\n                  : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\n              )}\n              data-testid={`link-${item.name.toLowerCase()}`}\n            >\n              <item.icon className=\"w-5 h-5\" />\n              <span className=\"font-medium\">{item.name}</span>\n              {item.badge && (\n                <Badge variant=\"secondary\" className=\"ml-auto bg-accent text-accent-foreground\">\n                  {item.badge}\n                </Badge>\n              )}\n            </Link>\n          ))}\n          \n          <div className=\"pt-4 border-t border-border\">\n            {settingsItems.map((item) => (\n              <Link \n                key={item.name} \n                href={item.href}\n                className={cn(\n                  \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200\",\n                  isActive(item.href)\n                    ? \"bg-primary/10 text-primary\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\n                )}\n                data-testid={`link-${item.name.toLowerCase()}`}\n              >\n                <item.icon className=\"w-5 h-5\" />\n                <span className=\"font-medium\">{item.name}</span>\n              </Link>\n            ))}\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start px-4 py-3 text-muted-foreground hover:text-foreground\"\n              onClick={() => window.location.href = '/api/logout'}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-5 h-5 mr-3\" />\n              <span className=\"font-medium\">Logout</span>\n            </Button>\n          </div>\n        </div>\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":5796},"client/src/components/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  icon: LucideIcon;\n  iconColor: string;\n  trend?: {\n    value: string;\n    isPositive: boolean;\n    icon: LucideIcon;\n  };\n}\n\nexport function StatsCard({ \n  title, \n  value, \n  subtitle, \n  icon: Icon, \n  iconColor, \n  trend \n}: StatsCardProps) {\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-muted-foreground text-sm font-medium\" data-testid={`text-${title.toLowerCase().replace(/\\s+/g, '-')}-title`}>\n              {title}\n            </p>\n            <p className=\"text-3xl font-bold text-foreground\" data-testid={`text-${title.toLowerCase().replace(/\\s+/g, '-')}-value`}>\n              {value}\n            </p>\n            {trend && (\n              <p className={`text-sm mt-1 flex items-center space-x-1 ${\n                trend.isPositive ? 'text-secondary' : 'text-accent'\n              }`}>\n                <trend.icon className=\"w-4 h-4\" />\n                <span>{trend.value}</span>\n              </p>\n            )}\n            {subtitle && !trend && (\n              <p className=\"text-accent text-sm mt-1\">{subtitle}</p>\n            )}\n          </div>\n          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${iconColor}`}>\n            <Icon className=\"text-xl w-6 h-6\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1642},"client/src/components/student-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertStudentSchema } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Student } from \"@shared/schema\";\n\nconst studentFormSchema = insertStudentSchema.extend({\n  dateOfBirth: z.string().optional(),\n});\n\ntype StudentFormData = z.infer<typeof studentFormSchema>;\n\ninterface StudentFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  student?: Student | null;\n}\n\nexport function StudentForm({ open, onOpenChange, student }: StudentFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<StudentFormData>({\n    resolver: zodResolver(studentFormSchema),\n    defaultValues: {\n      studentId: student?.studentId || \"\",\n      firstName: student?.firstName || \"\",\n      lastName: student?.lastName || \"\",\n      email: student?.email || \"\",\n      phone: student?.phone || \"\",\n      dateOfBirth: student?.dateOfBirth ? new Date(student.dateOfBirth).toISOString().split('T')[0] : \"\",\n      address: student?.address || \"\",\n      parentName: student?.parentName || \"\",\n      parentPhone: student?.parentPhone || \"\",\n      parentEmail: student?.parentEmail || \"\",\n      class: student?.class || \"\",\n      status: student?.status || \"active\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: StudentFormData) => {\n      const payload = {\n        ...data,\n        dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth).toISOString() : null,\n      };\n      return await apiRequest(\"POST\", \"/api/students\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Success\",\n        description: \"Student created successfully\",\n      });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create student\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: StudentFormData) => {\n      const payload = {\n        ...data,\n        dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth).toISOString() : null,\n      };\n      return await apiRequest(\"PUT\", `/api/students/${student?.id}`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Success\",\n        description: \"Student updated successfully\",\n      });\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update student\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: StudentFormData) => {\n    if (student) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {student ? \"Edit Student\" : \"Add New Student\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"studentId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Student ID</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-student-id\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"class\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Class</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-class\">\n                          <SelectValue placeholder=\"Select class\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"JSS 1A\">JSS 1A</SelectItem>\n                        <SelectItem value=\"JSS 1B\">JSS 1B</SelectItem>\n                        <SelectItem value=\"JSS 1C\">JSS 1C</SelectItem>\n                        <SelectItem value=\"JSS 2A\">JSS 2A</SelectItem>\n                        <SelectItem value=\"JSS 2B\">JSS 2B</SelectItem>\n                        <SelectItem value=\"JSS 2C\">JSS 2C</SelectItem>\n                        <SelectItem value=\"JSS 3A\">JSS 3A</SelectItem>\n                        <SelectItem value=\"JSS 3B\">JSS 3B</SelectItem>\n                        <SelectItem value=\"JSS 3C\">JSS 3C</SelectItem>\n                        <SelectItem value=\"SS 1A\">SS 1A</SelectItem>\n                        <SelectItem value=\"SS 1B\">SS 1B</SelectItem>\n                        <SelectItem value=\"SS 1C\">SS 1C</SelectItem>\n                        <SelectItem value=\"SS 2A\">SS 2A</SelectItem>\n                        <SelectItem value=\"SS 2B\">SS 2B</SelectItem>\n                        <SelectItem value=\"SS 2C\">SS 2C</SelectItem>\n                        <SelectItem value=\"SS 3A\">SS 3A</SelectItem>\n                        <SelectItem value=\"SS 3B\">SS 3B</SelectItem>\n                        <SelectItem value=\"SS 3C\">SS 3C</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-first-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-last-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" {...field} data-testid=\"input-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"dateOfBirth\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Date of Birth</FormLabel>\n                  <FormControl>\n                    <Input type=\"date\" {...field} data-testid=\"input-date-of-birth\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Address</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} data-testid=\"textarea-address\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-foreground\">Parent/Guardian Information</h4>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"parentName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Parent/Guardian Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-parent-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"parentPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Parent/Guardian Phone</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-parent-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"parentEmail\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Parent/Guardian Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" {...field} data-testid=\"input-parent-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"status\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Status</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-status\">\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      <SelectItem value=\"suspended\">Suspended</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isLoading}\n                data-testid=\"button-submit\"\n              >\n                {isLoading ? \"Saving...\" : student ? \"Update Student\" : \"Create Student\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13050},"client/src/components/top-nav.tsx":{"content":"import { Search, Bell, Menu } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface TopNavProps {\n  title: string;\n  subtitle?: string;\n  onToggleSidebar?: () => void;\n}\n\nexport function TopNav({ title, subtitle, onToggleSidebar }: TopNavProps) {\n  const { user } = useAuth();\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            className=\"lg:hidden p-2\"\n            onClick={onToggleSidebar}\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">{title}</h2>\n            {subtitle && (\n              <p className=\"text-muted-foreground\">{subtitle}</p>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          <div className=\"relative hidden md:block\">\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search students, exams...\"\n              className=\"w-64 pl-10 bg-muted border-border\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          \n          {/* Notifications */}\n          <div className=\"relative\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"relative p-2\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"h-5 w-5\" />\n              <Badge \n                variant=\"destructive\" \n                className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs flex items-center justify-center\"\n              >\n                5\n              </Badge>\n            </Button>\n          </div>\n          \n          {/* User Profile */}\n          <div className=\"flex items-center space-x-3\">\n            <img \n              src={user?.profileImageUrl || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"}\n              alt=\"User profile\" \n              className=\"w-10 h-10 rounded-full object-cover\"\n              data-testid=\"img-user-avatar\"\n            />\n            <div className=\"hidden md:block\">\n              <p className=\"font-medium text-foreground\" data-testid=\"text-user-name\">\n                {user?.firstName && user?.lastName \n                  ? `${user.firstName} ${user.lastName}` \n                  : user?.email || \"User\"}\n              </p>\n              <p className=\"text-sm text-muted-foreground capitalize\" data-testid=\"text-user-role\">\n                {user?.role || \"User\"}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3193},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/hooks/useRole.ts":{"content":"import { useAuth } from \"./useAuth\";\nimport type { User } from \"@shared/schema\";\n\nexport type UserRole = \"admin\" | \"teacher\" | \"student\" | \"parent\";\n\nexport interface RolePermissions {\n  students: string[];\n  teachers: string[];\n  exams: string[];\n  payments: string[];\n  messages: string[];\n  resources: string[];\n  settings: string[];\n  attendance: string[];\n  grades: string[];\n}\n\nconst permissions: Record<UserRole, RolePermissions> = {\n  admin: {\n    students: [\"create\", \"read\", \"update\", \"delete\"],\n    teachers: [\"create\", \"read\", \"update\", \"delete\"],\n    exams: [\"create\", \"read\", \"update\", \"delete\"],\n    payments: [\"create\", \"read\", \"update\", \"delete\"],\n    messages: [\"create\", \"read\", \"update\", \"delete\"],\n    resources: [\"create\", \"read\", \"update\", \"delete\"],\n    settings: [\"create\", \"read\", \"update\", \"delete\"],\n    attendance: [\"create\", \"read\", \"update\", \"delete\"],\n    grades: [\"create\", \"read\", \"update\", \"delete\"]\n  },\n  teacher: {\n    students: [\"read\", \"update\"],\n    teachers: [\"read\"],\n    exams: [\"create\", \"read\", \"update\"],\n    payments: [\"read\"],\n    messages: [\"create\", \"read\", \"update\"],\n    resources: [\"create\", \"read\", \"update\"],\n    settings: [\"read\"],\n    attendance: [\"create\", \"read\", \"update\"],\n    grades: [\"create\", \"read\", \"update\"]\n  },\n  student: {\n    students: [\"read\"],\n    teachers: [\"read\"],\n    exams: [\"read\"],\n    payments: [\"read\"],\n    messages: [\"create\", \"read\"],\n    resources: [\"read\"],\n    settings: [\"read\"],\n    attendance: [\"read\"],\n    grades: [\"read\"]\n  },\n  parent: {\n    students: [\"read\"],\n    teachers: [\"read\"],\n    exams: [\"read\"],\n    payments: [\"read\"],\n    messages: [\"create\", \"read\"],\n    resources: [\"read\"],\n    settings: [\"read\"],\n    attendance: [\"read\"],\n    grades: [\"read\"]\n  }\n};\n\nexport function useRole() {\n  const { user } = useAuth() as { user: User | undefined; isLoading: boolean; isAuthenticated: boolean };\n\n  const hasPermission = (resource: keyof RolePermissions, action: string): boolean => {\n    if (!user?.role) return false;\n    \n    const userRole = user.role as UserRole;\n    const rolePermissions = permissions[userRole];\n    \n    if (!rolePermissions || !rolePermissions[resource]) {\n      return false;\n    }\n    \n    return rolePermissions[resource].includes(action);\n  };\n\n  const canAccess = (allowedRoles: UserRole[]): boolean => {\n    if (!user?.role) return false;\n    return allowedRoles.includes(user.role as UserRole);\n  };\n\n  const getUserRole = (): UserRole | null => {\n    return (user?.role as UserRole) || null;\n  };\n\n  const isAdmin = (): boolean => user?.role === \"admin\";\n  const isTeacher = (): boolean => user?.role === \"teacher\";\n  const isStudent = (): boolean => user?.role === \"student\";\n  const isParent = (): boolean => user?.role === \"parent\";\n\n  return {\n    role: getUserRole(),\n    hasPermission,\n    canAccess,\n    isAdmin,\n    isTeacher,\n    isStudent,\n    isParent,\n    permissions: user?.role ? permissions[user.role as UserRole] : null\n  };\n}","size_bytes":2979},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/top-nav\";\nimport { StatsCard } from \"@/components/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  UserCheck, \n  CreditCard, \n  BarChart3, \n  UserPlus, \n  Upload, \n  Megaphone, \n  FileText,\n  TrendingUp,\n  TriangleAlert,\n  Eye,\n  Play,\n  Download\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useRole } from \"@/hooks/useRole\";\nimport { RoleGuard, AdminOnly, AdminOrTeacher } from \"@/components/RoleGuard\";\nimport type { Student } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const { role, isAdmin, isTeacher, isStudent, isParent } = useRole();\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: students, isLoading: studentsLoading } = useQuery({\n    queryKey: [\"/api/students\"],\n  });\n\n  const { data: resources } = useQuery({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const recentStudents = students?.slice(0, 3) || [];\n  const featuredResources = resources?.slice(0, 4) || [];\n\n  const recentActivities = [\n    {\n      icon: UserPlus,\n      description: \"New student registration completed\",\n      timestamp: \"2 minutes ago\",\n      color: \"bg-primary/10 text-primary\"\n    },\n    {\n      icon: CreditCard,\n      description: \"Payment received from student\",\n      timestamp: \"15 minutes ago\",\n      color: \"bg-secondary/10 text-secondary\"\n    },\n    {\n      icon: FileText,\n      description: \"New JAMB questions uploaded\",\n      timestamp: \"1 hour ago\",\n      color: \"bg-accent/10 text-accent\"\n    },\n    {\n      icon: TriangleAlert,\n      description: \"Payment overdue alert for 3 students\",\n      timestamp: \"2 hours ago\",\n      color: \"bg-destructive/10 text-destructive\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <TopNav \n        title={`${role ? role.charAt(0).toUpperCase() + role.slice(1) : 'Dashboard'}`} \n        subtitle={`Welcome back, ${user?.firstName || 'User'}`}\n      />\n      \n      <div className=\"p-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatsCard\n            title=\"Total Students\"\n            value={statsLoading ? \"Loading...\" : stats?.totalStudents || 0}\n            icon={Users}\n            iconColor=\"bg-primary/10 text-primary\"\n            trend={{\n              value: \"+12% from last month\",\n              isPositive: true,\n              icon: TrendingUp\n            }}\n          />\n          \n          <StatsCard\n            title=\"Active Teachers\"\n            value={statsLoading ? \"Loading...\" : stats?.activeTeachers || 0}\n            icon={UserCheck}\n            iconColor=\"bg-secondary/10 text-secondary\"\n            trend={{\n              value: \"+3 new this month\",\n              isPositive: true,\n              icon: TrendingUp\n            }}\n          />\n          \n          <StatsCard\n            title=\"Pending Payments\"\n            value={statsLoading ? \"Loading...\" : stats?.pendingPayments || \"₦0\"}\n            icon={CreditCard}\n            iconColor=\"bg-accent/10 text-accent\"\n            subtitle=\"23 overdue\"\n          />\n          \n          <StatsCard\n            title=\"Average Attendance\"\n            value={statsLoading ? \"Loading...\" : stats?.averageAttendance || \"0%\"}\n            icon={BarChart3}\n            iconColor=\"bg-destructive/10 text-destructive\"\n            trend={{\n              value: \"+2.1% this week\",\n              isPositive: true,\n              icon: TrendingUp\n            }}\n          />\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Recent Students */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Recent Students</CardTitle>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-students\">\n                    View All\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {studentsLoading ? (\n                  <div className=\"text-center py-8\">Loading students...</div>\n                ) : recentStudents.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No students found\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-border\">\n                          <th className=\"text-left py-3 text-muted-foreground font-medium\">Student</th>\n                          <th className=\"text-left py-3 text-muted-foreground font-medium\">Class</th>\n                          <th className=\"text-left py-3 text-muted-foreground font-medium\">Status</th>\n                          <th className=\"text-left py-3 text-muted-foreground font-medium\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-border\">\n                        {recentStudents.map((student: Student) => (\n                          <tr key={student.id} className=\"hover:bg-muted/50\">\n                            <td className=\"py-4\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-primary font-medium\">\n                                    {student.firstName?.charAt(0)}{student.lastName?.charAt(0)}\n                                  </span>\n                                </div>\n                                <div>\n                                  <p className=\"font-medium text-foreground\" data-testid={`text-student-name-${student.id}`}>\n                                    {student.firstName} {student.lastName}\n                                  </p>\n                                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-student-id-${student.id}`}>\n                                    ID: {student.studentId}\n                                  </p>\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"py-4 text-foreground\" data-testid={`text-student-class-${student.id}`}>\n                              {student.class}\n                            </td>\n                            <td className=\"py-4\">\n                              <Badge \n                                variant={student.status === 'active' ? 'default' : 'secondary'}\n                                className={student.status === 'active' ? 'bg-secondary/10 text-secondary' : 'bg-accent/10 text-accent'}\n                              >\n                                {student.status}\n                              </Badge>\n                            </td>\n                            <td className=\"py-4\">\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-student-${student.id}`}>\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions & Recent Activity */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button \n                  className=\"w-full justify-start bg-primary hover:bg-primary/90\"\n                  data-testid=\"button-add-student\"\n                >\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Add New Student\n                </Button>\n                \n                <Button \n                  className=\"w-full justify-start bg-secondary hover:bg-secondary/90\"\n                  data-testid=\"button-upload-exam\"\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload Exam Questions\n                </Button>\n                \n                <Button \n                  className=\"w-full justify-start bg-accent hover:bg-accent/90\"\n                  data-testid=\"button-send-announcement\"\n                >\n                  <Megaphone className=\"w-4 h-4 mr-2\" />\n                  Send Announcement\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full justify-start\"\n                  data-testid=\"button-generate-report\"\n                >\n                  <BarChart3 className=\"w-4 h-4 mr-2\" />\n                  Generate Report\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {recentActivities.map((activity, index) => (\n                  <div key={index} className=\"flex items-start space-x-3\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${activity.color}`}>\n                      <activity.icon className=\"w-4 h-4\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-foreground\" data-testid={`text-activity-${index}`}>\n                        {activity.description}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid={`text-activity-time-${index}`}>\n                        {activity.timestamp}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Additional Sections */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-8\">\n          {/* Attendance Chart Placeholder */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Attendance Overview</CardTitle>\n                <select className=\"border border-border rounded-lg px-3 py-2 text-sm\">\n                  <option value=\"week\">This Week</option>\n                  <option value=\"month\">This Month</option>\n                  <option value=\"term\">This Term</option>\n                </select>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted rounded-lg flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <BarChart3 className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-muted-foreground\">Attendance Chart</p>\n                  <p className=\"text-sm text-muted-foreground\">Chart implementation needed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Status</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-secondary/10 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-secondary rounded-full\"></div>\n                  <span className=\"font-medium text-foreground\">Paid Students</span>\n                </div>\n                <span className=\"font-bold text-foreground\" data-testid=\"text-paid-students\">1,124</span>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-4 bg-accent/10 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-accent rounded-full\"></div>\n                  <span className=\"font-medium text-foreground\">Pending Payments</span>\n                </div>\n                <span className=\"font-bold text-foreground\" data-testid=\"text-pending-payments\">89</span>\n              </div>\n              \n              <div className=\"flex items-center justify-between p-4 bg-destructive/10 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-destructive rounded-full\"></div>\n                  <span className=\"font-medium text-foreground\">Overdue</span>\n                </div>\n                <span className=\"font-bold text-foreground\" data-testid=\"text-overdue-payments\">34</span>\n              </div>\n              \n              <div className=\"pt-4 border-t border-border\">\n                <Button \n                  className=\"w-full bg-primary hover:bg-primary/90\"\n                  data-testid=\"button-view-payment-details\"\n                >\n                  View Payment Details\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Exam Module Preview */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Exam Module</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-manage-exams\">\n                Manage Exams\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <FileText className=\"text-primary text-2xl\" />\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">JAMB Questions</h4>\n                <p className=\"text-muted-foreground text-sm mb-4\">Practice questions for JAMB preparation</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-jamb-count\">2,456</p>\n                <p className=\"text-sm text-muted-foreground\">Available Questions</p>\n              </div>\n              \n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\">\n                <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <FileText className=\"text-secondary text-2xl\" />\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">WAEC Questions</h4>\n                <p className=\"text-muted-foreground text-sm mb-4\">West African Examination Council prep</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-waec-count\">1,834</p>\n                <p className=\"text-sm text-muted-foreground\">Available Questions</p>\n              </div>\n              \n              <div className=\"text-center p-6 border border-border rounded-lg hover:shadow-md transition-shadow\">\n                <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <FileText className=\"text-accent text-2xl\" />\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">NECO Questions</h4>\n                <p className=\"text-muted-foreground text-sm mb-4\">National Examination Council questions</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-neco-count\">1,567</p>\n                <p className=\"text-sm text-muted-foreground\">Available Questions</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Resource Library Preview */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Resource Library</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-browse-resources\">\n                Browse All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {featuredResources.length === 0 ? (\n                <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                  No resources available\n                </div>\n              ) : (\n                featuredResources.map((resource: any) => (\n                  <div key={resource.id} className=\"border border-border rounded-lg overflow-hidden hover:shadow-md transition-shadow\">\n                    <div className=\"h-32 bg-muted flex items-center justify-center\">\n                      <FileText className=\"w-8 h-8 text-muted-foreground\" />\n                    </div>\n                    <div className=\"p-4\">\n                      <h4 className=\"font-semibold text-foreground mb-1\" data-testid={`text-resource-title-${resource.id}`}>\n                        {resource.title}\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-resource-type-${resource.id}`}>\n                        {resource.type?.toUpperCase()} {resource.type}\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-muted-foreground\" data-testid={`text-resource-downloads-${resource.id}`}>\n                          {resource.downloads} downloads\n                        </span>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-download-resource-${resource.id}`}>\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18825},"client/src/pages/exams.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/top-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Upload, Search, FileText, Play, Clock, Users } from \"lucide-react\";\nimport type { Exam } from \"@shared/schema\";\n\nexport default function Exams() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"all\");\n\n  const { data: exams, isLoading } = useQuery({\n    queryKey: [\"/api/exams\"],\n  });\n\n  const filteredExams = exams?.filter((exam: Exam) => {\n    const matchesSearch = exam.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         exam.subject.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = selectedType === \"all\" || exam.type === selectedType;\n    return matchesSearch && matchesType;\n  }) || [];\n\n  const examStats = {\n    jamb: exams?.filter((e: Exam) => e.type === \"jamb\").length || 0,\n    waec: exams?.filter((e: Exam) => e.type === \"waec\").length || 0,\n    neco: exams?.filter((e: Exam) => e.type === \"neco\").length || 0,\n    internal: exams?.filter((e: Exam) => e.type === \"internal\").length || 0,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopNav title=\"Exams\" subtitle=\"Manage examination questions and practice tests\" />\n      \n      <div className=\"p-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"text-primary text-2xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">JAMB Questions</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-jamb-count\">\n                {examStats.jamb}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Available Sets</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"text-secondary text-2xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">WAEC Questions</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-waec-count\">\n                {examStats.waec}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Available Sets</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"text-accent text-2xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">NECO Questions</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-neco-count\">\n                {examStats.neco}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Available Sets</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"text-primary text-2xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-2\">Internal Exams</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-internal-count\">\n                {examStats.internal}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">School Tests</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Examination Management</CardTitle>\n              <Button data-testid=\"button-upload-exam\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Upload Questions\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Search and Filters */}\n            <div className=\"flex items-center space-x-4 mb-6\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search exams...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-exams\"\n                />\n              </div>\n            </div>\n\n            {/* Exam Types Tabs */}\n            <Tabs value={selectedType} onValueChange={setSelectedType} className=\"mb-6\">\n              <TabsList>\n                <TabsTrigger value=\"all\">All Exams</TabsTrigger>\n                <TabsTrigger value=\"jamb\">JAMB</TabsTrigger>\n                <TabsTrigger value=\"waec\">WAEC</TabsTrigger>\n                <TabsTrigger value=\"neco\">NECO</TabsTrigger>\n                <TabsTrigger value=\"internal\">Internal</TabsTrigger>\n              </TabsList>\n            </Tabs>\n\n            {/* Exams Table */}\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading exams...</div>\n            ) : filteredExams.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {searchQuery ? \"No exams found matching your search.\" : \"No exams available.\"}\n              </div>\n            ) : (\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Exam Title</TableHead>\n                      <TableHead>Type</TableHead>\n                      <TableHead>Subject</TableHead>\n                      <TableHead>Questions</TableHead>\n                      <TableHead>Duration</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredExams.map((exam: Exam) => (\n                      <TableRow key={exam.id}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\" data-testid={`text-exam-title-${exam.id}`}>\n                              {exam.title}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Created {new Date(exam.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant=\"outline\"\n                            className={\n                              exam.type === 'jamb' ? 'border-primary text-primary' :\n                              exam.type === 'waec' ? 'border-secondary text-secondary' :\n                              exam.type === 'neco' ? 'border-accent text-accent' :\n                              'border-muted-foreground text-muted-foreground'\n                            }\n                            data-testid={`badge-exam-type-${exam.id}`}\n                          >\n                            {exam.type.toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell data-testid={`text-exam-subject-${exam.id}`}>\n                          {exam.subject}\n                        </TableCell>\n                        <TableCell data-testid={`text-exam-questions-${exam.id}`}>\n                          {Array.isArray(exam.questions) ? exam.questions.length : 0} questions\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-1\">\n                            <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                            <span data-testid={`text-exam-duration-${exam.id}`}>\n                              {exam.duration || 0} mins\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={exam.isActive ? 'default' : 'secondary'}\n                            className={exam.isActive ? 'bg-secondary/10 text-secondary' : 'bg-muted/10 text-muted-foreground'}\n                            data-testid={`badge-exam-status-${exam.id}`}\n                          >\n                            {exam.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              data-testid={`button-preview-exam-${exam.id}`}\n                            >\n                              <FileText className=\"w-4 h-4 mr-1\" />\n                              Preview\n                            </Button>\n                            <Button \n                              size=\"sm\"\n                              data-testid={`button-start-exam-${exam.id}`}\n                            >\n                              <Play className=\"w-4 h-4 mr-1\" />\n                              Start\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10832},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { GraduationCap, Users, BookOpen, Calculator, MessageCircle, Settings } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/50 backdrop-blur\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <GraduationCap className=\"text-primary-foreground text-xl\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">EduManage</h1>\n                <p className=\"text-sm text-muted-foreground\">School Management System</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => window.location.href = '/api/login'} \n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-login\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-6\">\n        <div className=\"container mx-auto text-center\">\n          <h2 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n            Modern School\n            <span className=\"text-primary block\">Management System</span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Streamline your educational institution with our comprehensive platform \n            for student management, exams, payments, and communication.\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={() => window.location.href = '/api/login'}\n            className=\"bg-primary hover:bg-primary/90 text-lg px-8 py-3\"\n            data-testid=\"button-get-started\"\n          >\n            Get Started\n          </Button>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 px-6 bg-muted/30\">\n        <div className=\"container mx-auto\">\n          <h3 className=\"text-3xl font-bold text-center text-foreground mb-12\">\n            Everything You Need to Manage Your School\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                  <Users className=\"text-primary text-xl\" />\n                </div>\n                <CardTitle>Student Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Complete student profiles, enrollment tracking, attendance monitoring, \n                  and academic progress management.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mb-4\">\n                  <BookOpen className=\"text-secondary text-xl\" />\n                </div>\n                <CardTitle>Exam Module</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  JAMB, WAEC, and NECO practice questions with auto-scoring, \n                  progress tracking, and detailed analytics.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mb-4\">\n                  <Calculator className=\"text-accent text-xl\" />\n                </div>\n                <CardTitle>Payment Tracking</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Monitor fee payments, track overdue amounts, generate reports, \n                  and manage payment history efficiently.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                  <MessageCircle className=\"text-primary text-xl\" />\n                </div>\n                <CardTitle>Communication Hub</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Secure messaging between teachers, students, and parents. \n                  Announcements and notification system.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mb-4\">\n                  <BookOpen className=\"text-secondary text-xl\" />\n                </div>\n                <CardTitle>Resource Library</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Digital library with e-books, videos, study guides, and \n                  educational materials for all subjects.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mb-4\">\n                  <Settings className=\"text-accent text-xl\" />\n                </div>\n                <CardTitle>Admin Controls</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Role-based access control, system customization, reporting, \n                  and comprehensive administrative tools.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-6\">\n        <div className=\"container mx-auto text-center\">\n          <h3 className=\"text-3xl font-bold text-foreground mb-6\">\n            Ready to Transform Your School Management?\n          </h3>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join hundreds of schools already using EduManage to streamline \n            their operations and improve educational outcomes.\n          </p>\n          <Button \n            size=\"lg\"\n            onClick={() => window.location.href = '/api/login'}\n            className=\"bg-primary hover:bg-primary/90 text-lg px-8 py-3\"\n            data-testid=\"button-start-now\"\n          >\n            Start Now\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-card/50 py-8 px-6\">\n        <div className=\"container mx-auto text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <GraduationCap className=\"text-primary-foreground text-lg\" />\n            </div>\n            <span className=\"font-bold text-foreground\">EduManage</span>\n          </div>\n          <p className=\"text-muted-foreground\">\n            © 2025 EduManage. All rights reserved.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":8037},"client/src/pages/messages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/top-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertMessageSchema } from \"@shared/schema\";\nimport { \n  MessageSquare, \n  Search, \n  Plus, \n  Send,\n  Inbox,\n  Forward,\n  Users,\n  Megaphone,\n  Eye,\n  Reply\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Message, User } from \"@shared/schema\";\n\nconst messageFormSchema = insertMessageSchema.omit({ senderId: true });\n\ntype MessageFormData = z.infer<typeof messageFormSchema>;\n\nexport default function Messages() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"all\");\n  const [isComposeOpen, setIsComposeOpen] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: messages, isLoading } = useQuery({\n    queryKey: [\"/api/messages\"],\n  });\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  const form = useForm<MessageFormData>({\n    resolver: zodResolver(messageFormSchema),\n    defaultValues: {\n      subject: \"\",\n      content: \"\",\n      messageType: \"personal\",\n    },\n  });\n\n  const sendMutation = useMutation({\n    mutationFn: async (data: MessageFormData) => {\n      return await apiRequest(\"POST\", \"/api/messages\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      toast({\n        title: \"Success\",\n        description: \"Message sent successfully\",\n      });\n      setIsComposeOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredMessages = messages?.filter((message: Message) => {\n    const matchesSearch = message.subject?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         message.content.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = selectedType === \"all\" || message.messageType === selectedType;\n    return matchesSearch && matchesType;\n  }) || [];\n\n  const messageStats = {\n    total: messages?.length || 0,\n    unread: messages?.filter((m: Message) => !m.isRead).length || 0,\n    sent: messages?.filter((m: Message) => m.senderId === user?.id).length || 0,\n    received: messages?.filter((m: Message) => m.recipientId === user?.id).length || 0,\n  };\n\n  const onSubmit = (data: MessageFormData) => {\n    sendMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopNav title=\"Messages\" subtitle=\"Communication hub for teachers, students, and parents\" />\n      \n      <div className=\"p-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Total Messages</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-messages\">\n                    {messageStats.total}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <MessageSquare className=\"text-primary text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Unread</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-unread-messages\">\n                    {messageStats.unread}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <Inbox className=\"text-accent text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Forward</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-sent-messages\">\n                    {messageStats.sent}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                  <Forward className=\"text-secondary text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Received</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-received-messages\">\n                    {messageStats.received}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Users className=\"text-primary text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Message Categories */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Categories</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <Button \n                variant={selectedType === \"all\" ? \"default\" : \"ghost\"} \n                className=\"w-full justify-start\"\n                onClick={() => setSelectedType(\"all\")}\n                data-testid=\"button-filter-all\"\n              >\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                All Messages\n                <Badge variant=\"secondary\" className=\"ml-auto\">\n                  {messageStats.total}\n                </Badge>\n              </Button>\n              \n              <Button \n                variant={selectedType === \"personal\" ? \"default\" : \"ghost\"} \n                className=\"w-full justify-start\"\n                onClick={() => setSelectedType(\"personal\")}\n                data-testid=\"button-filter-personal\"\n              >\n                <Users className=\"w-4 h-4 mr-2\" />\n                Personal\n              </Button>\n              \n              <Button \n                variant={selectedType === \"announcement\" ? \"default\" : \"ghost\"} \n                className=\"w-full justify-start\"\n                onClick={() => setSelectedType(\"announcement\")}\n                data-testid=\"button-filter-announcements\"\n              >\n                <Megaphone className=\"w-4 h-4 mr-2\" />\n                Announcements\n              </Button>\n              \n              <Button \n                variant={selectedType === \"notification\" ? \"default\" : \"ghost\"} \n                className=\"w-full justify-start\"\n                onClick={() => setSelectedType(\"notification\")}\n                data-testid=\"button-filter-notifications\"\n              >\n                <Inbox className=\"w-4 h-4 mr-2\" />\n                Notifications\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Messages List */}\n          <Card className=\"lg:col-span-3\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Messages</CardTitle>\n                <Dialog open={isComposeOpen} onOpenChange={setIsComposeOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-compose-message\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Compose Message\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>Compose New Message</DialogTitle>\n                    </DialogHeader>\n                    \n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"recipientId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Recipient</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-recipient\">\n                                      <SelectValue placeholder=\"Select recipient\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"all-students\">All Students</SelectItem>\n                                    <SelectItem value=\"all-teachers\">All Teachers</SelectItem>\n                                    <SelectItem value=\"all-parents\">All Parents</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={form.control}\n                            name=\"messageType\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Message Type</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-message-type\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"personal\">Personal</SelectItem>\n                                    <SelectItem value=\"announcement\">Announcement</SelectItem>\n                                    <SelectItem value=\"notification\">Notification</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"subject\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Subject</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-message-subject\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"content\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Message</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  {...field} \n                                  rows={6} \n                                  placeholder=\"Type your message here...\"\n                                  data-testid=\"textarea-message-content\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setIsComposeOpen(false)}>\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={sendMutation.isPending} data-testid=\"button-send-message\">\n                            <Send className=\"w-4 h-4 mr-2\" />\n                            {sendMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {/* Search */}\n              <div className=\"relative mb-6\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search messages...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-messages\"\n                />\n              </div>\n\n              {/* Messages List */}\n              {isLoading ? (\n                <div className=\"text-center py-8\">Loading messages...</div>\n              ) : filteredMessages.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  {searchQuery ? \"No messages found matching your search.\" : \"No messages found.\"}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredMessages.map((message: Message) => (\n                    <div\n                      key={message.id}\n                      className={`p-4 border border-border rounded-lg hover:shadow-sm transition-shadow ${\n                        !message.isRead ? \"bg-accent/5\" : \"\"\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            {!message.isRead && (\n                              <div className=\"w-2 h-2 bg-accent rounded-full\"></div>\n                            )}\n                            <Badge \n                              variant=\"outline\" \n                              className={\n                                message.messageType === 'announcement' ? 'border-accent text-accent' :\n                                message.messageType === 'notification' ? 'border-primary text-primary' :\n                                'border-secondary text-secondary'\n                              }\n                            >\n                              {message.messageType}\n                            </Badge>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {new Date(message.createdAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                          \n                          <h4 className=\"font-medium text-foreground mb-1\" data-testid={`text-message-subject-${message.id}`}>\n                            {message.subject || \"No Subject\"}\n                          </h4>\n                          \n                          <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`text-message-preview-${message.id}`}>\n                            {message.content.substring(0, 120)}\n                            {message.content.length > 120 && \"...\"}\n                          </p>\n                          \n                          <div className=\"text-xs text-muted-foreground\">\n                            From: {message.senderId === user?.id ? \"You\" : \"System\"}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-read-message-${message.id}`}>\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          {message.messageType === \"personal\" && (\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-reply-message-${message.id}`}>\n                              <Reply className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18610},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/top-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertPaymentSchema } from \"@shared/schema\";\nimport { \n  CreditCard, \n  Search, \n  Plus, \n  DollarSign, \n  AlertTriangle, \n  CheckCircle,\n  Clock,\n  Download,\n  Eye\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Payment, Student } from \"@shared/schema\";\n\nconst paymentFormSchema = insertPaymentSchema.extend({\n  dueDate: z.string().optional(),\n});\n\ntype PaymentFormData = z.infer<typeof paymentFormSchema>;\n\nexport default function Payments() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: payments, isLoading } = useQuery({\n    queryKey: [\"/api/payments\"],\n  });\n\n  const { data: students } = useQuery({\n    queryKey: [\"/api/students\"],\n  });\n\n  const form = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentFormSchema),\n    defaultValues: {\n      amount: \"\",\n      purpose: \"\",\n      dueDate: \"\",\n      status: \"pending\",\n      term: \"First Term\",\n      academicYear: \"2024/2025\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: PaymentFormData) => {\n      const payload = {\n        ...data,\n        amount: parseFloat(data.amount as string),\n        dueDate: data.dueDate ? new Date(data.dueDate).toISOString() : null,\n      };\n      return await apiRequest(\"POST\", \"/api/payments\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      toast({\n        title: \"Success\",\n        description: \"Payment record created successfully\",\n      });\n      setIsFormOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create payment record\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredPayments = payments?.filter((payment: Payment & { student?: Student }) => {\n    const matchesSearch = payment.purpose.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         payment.student?.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         payment.student?.lastName?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = selectedStatus === \"all\" || payment.status === selectedStatus;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const paymentStats = {\n    total: payments?.length || 0,\n    paid: payments?.filter((p: Payment) => p.status === \"paid\").length || 0,\n    pending: payments?.filter((p: Payment) => p.status === \"pending\").length || 0,\n    overdue: payments?.filter((p: Payment) => p.status === \"overdue\").length || 0,\n    totalAmount: payments?.reduce((sum: number, p: Payment) => sum + parseFloat(p.amount.toString()), 0) || 0,\n    paidAmount: payments?.filter((p: Payment) => p.status === \"paid\")\n      .reduce((sum: number, p: Payment) => sum + parseFloat(p.amount.toString()), 0) || 0,\n  };\n\n  const onSubmit = (data: PaymentFormData) => {\n    createMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopNav title=\"Payments\" subtitle=\"Track and manage student fee payments\" />\n      \n      <div className=\"p-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Total Payments</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-payments\">\n                    {paymentStats.total}\n                  </p>\n                  <p className=\"text-secondary text-sm mt-1\">\n                    ₦{paymentStats.totalAmount.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <CreditCard className=\"text-primary text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Paid</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-paid-payments\">\n                    {paymentStats.paid}\n                  </p>\n                  <p className=\"text-secondary text-sm mt-1\">\n                    ₦{paymentStats.paidAmount.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"text-secondary text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Pending</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-pending-payments\">\n                    {paymentStats.pending}\n                  </p>\n                  <p className=\"text-accent text-sm mt-1\">\n                    Awaiting payment\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-accent text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm font-medium\">Overdue</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-overdue-payments\">\n                    {paymentStats.overdue}\n                  </p>\n                  <p className=\"text-destructive text-sm mt-1\">\n                    Requires attention\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                  <AlertTriangle className=\"text-destructive text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Payment Management</CardTitle>\n              <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-payment\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Payment\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Payment Record</DialogTitle>\n                  </DialogHeader>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"studentId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Student</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-student\">\n                                  <SelectValue placeholder=\"Select student\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {students?.map((student: Student) => (\n                                  <SelectItem key={student.id} value={student.id}>\n                                    {student.firstName} {student.lastName} - {student.studentId}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"amount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Amount (₦)</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-amount\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"dueDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Due Date</FormLabel>\n                              <FormControl>\n                                <Input type=\"date\" {...field} data-testid=\"input-due-date\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"purpose\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Purpose</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"e.g., School fees, Registration fee\" data-testid=\"input-purpose\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"term\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Term</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-term\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"First Term\">First Term</SelectItem>\n                                  <SelectItem value=\"Second Term\">Second Term</SelectItem>\n                                  <SelectItem value=\"Third Term\">Third Term</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"academicYear\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Academic Year</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-academic-year\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsFormOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-payment\">\n                          {createMutation.isPending ? \"Creating...\" : \"Create Payment\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Search and Filters */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search payments...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-payments\"\n                />\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export-payments\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n\n            {/* Status Tabs */}\n            <Tabs value={selectedStatus} onValueChange={setSelectedStatus} className=\"mb-6\">\n              <TabsList>\n                <TabsTrigger value=\"all\">All ({paymentStats.total})</TabsTrigger>\n                <TabsTrigger value=\"paid\">Paid ({paymentStats.paid})</TabsTrigger>\n                <TabsTrigger value=\"pending\">Pending ({paymentStats.pending})</TabsTrigger>\n                <TabsTrigger value=\"overdue\">Overdue ({paymentStats.overdue})</TabsTrigger>\n              </TabsList>\n            </Tabs>\n\n            {/* Payments Table */}\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading payments...</div>\n            ) : filteredPayments.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {searchQuery ? \"No payments found matching your search.\" : \"No payments found.\"}\n              </div>\n            ) : (\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Purpose</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Due Date</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Term/Year</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPayments.map((payment: Payment) => (\n                      <TableRow key={payment.id}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\" data-testid={`text-payment-student-${payment.id}`}>\n                              Student #{payment.studentId}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">ID: {payment.studentId}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell data-testid={`text-payment-purpose-${payment.id}`}>\n                          {payment.purpose}\n                        </TableCell>\n                        <TableCell>\n                          <p className=\"font-bold\" data-testid={`text-payment-amount-${payment.id}`}>\n                            ₦{parseFloat(payment.amount.toString()).toLocaleString()}\n                          </p>\n                        </TableCell>\n                        <TableCell data-testid={`text-payment-due-date-${payment.id}`}>\n                          {payment.dueDate ? new Date(payment.dueDate).toLocaleDateString() : \"N/A\"}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={\n                              payment.status === 'paid' ? 'default' : \n                              payment.status === 'overdue' ? 'destructive' : 'secondary'\n                            }\n                            className={\n                              payment.status === 'paid' ? 'bg-secondary/10 text-secondary' :\n                              payment.status === 'overdue' ? 'bg-destructive/10 text-destructive' :\n                              'bg-accent/10 text-accent'\n                            }\n                            data-testid={`badge-payment-status-${payment.id}`}\n                          >\n                            {payment.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <p>{payment.term}</p>\n                            <p className=\"text-muted-foreground\">{payment.academicYear}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-payment-${payment.id}`}>\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            {payment.status === 'pending' && (\n                              <Button size=\"sm\" data-testid={`button-mark-paid-${payment.id}`}>\n                                Mark Paid\n                              </Button>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20339},"client/src/pages/resources.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/top-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertResourceSchema } from \"@shared/schema\";\nimport { \n  BookOpen, \n  Search, \n  Plus, \n  Upload,\n  Download,\n  Eye,\n  FileText,\n  Video,\n  Music,\n  Image,\n  Link,\n  Filter,\n  Grid,\n  List\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Resource } from \"@shared/schema\";\n\nconst resourceFormSchema = insertResourceSchema.omit({ uploadedBy: true, downloads: true });\n\ntype ResourceFormData = z.infer<typeof resourceFormSchema>;\n\nexport default function Resources() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"all\");\n  const [selectedSubject, setSelectedSubject] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [isUploadOpen, setIsUploadOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: resources, isLoading } = useQuery({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const form = useForm<ResourceFormData>({\n    resolver: zodResolver(resourceFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      type: \"pdf\",\n      subject: \"\",\n      class: \"\",\n      fileUrl: \"\",\n      isPublic: true,\n    },\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: ResourceFormData) => {\n      return await apiRequest(\"POST\", \"/api/resources\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resources\"] });\n      toast({\n        title: \"Success\",\n        description: \"Resource uploaded successfully\",\n      });\n      setIsUploadOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload resource\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredResources = resources?.filter((resource: Resource) => {\n    const matchesSearch = resource.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         resource.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         resource.subject?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = selectedType === \"all\" || resource.type === selectedType;\n    const matchesSubject = selectedSubject === \"all\" || resource.subject === selectedSubject;\n    return matchesSearch && matchesType && matchesSubject;\n  }) || [];\n\n  const resourceStats = {\n    total: resources?.length || 0,\n    pdf: resources?.filter((r: Resource) => r.type === \"pdf\").length || 0,\n    video: resources?.filter((r: Resource) => r.type === \"video\").length || 0,\n    audio: resources?.filter((r: Resource) => r.type === \"audio\").length || 0,\n    image: resources?.filter((r: Resource) => r.type === \"image\").length || 0,\n    link: resources?.filter((r: Resource) => r.type === \"link\").length || 0,\n  };\n\n  const subjects = [...new Set(resources?.map((r: Resource) => r.subject).filter(Boolean))] || [];\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"pdf\": return FileText;\n      case \"video\": return Video;\n      case \"audio\": return Music;\n      case \"image\": return Image;\n      case \"link\": return Link;\n      default: return FileText;\n    }\n  };\n\n  const onSubmit = (data: ResourceFormData) => {\n    uploadMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopNav title=\"Resources\" subtitle=\"Educational materials and study resources\" />\n      \n      <div className=\"p-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <BookOpen className=\"text-primary text-xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-1\">Total Resources</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-resources\">\n                {resourceStats.total}\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <FileText className=\"text-secondary text-xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-1\">PDFs</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-pdf-count\">\n                {resourceStats.pdf}\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Video className=\"text-accent text-xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-1\">Videos</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-video-count\">\n                {resourceStats.video}\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Music className=\"text-primary text-xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-1\">Audio</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-audio-count\">\n                {resourceStats.audio}\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Link className=\"text-secondary text-xl\" />\n              </div>\n              <h4 className=\"font-semibold text-foreground mb-1\">Links</h4>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-link-count\">\n                {resourceStats.link}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Resource Library</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"button-grid-view\"\n                >\n                  <Grid className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"button-list-view\"\n                >\n                  <List className=\"w-4 h-4\" />\n                </Button>\n                <Dialog open={isUploadOpen} onOpenChange={setIsUploadOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-upload-resource\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Upload Resource\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>Upload New Resource</DialogTitle>\n                    </DialogHeader>\n                    \n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Title</FormLabel>\n                              <FormControl>\n                                <Input {...field} data-testid=\"input-resource-title\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} rows={3} data-testid=\"textarea-resource-description\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"type\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Resource Type</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-resource-type\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"pdf\">PDF Document</SelectItem>\n                                    <SelectItem value=\"video\">Video</SelectItem>\n                                    <SelectItem value=\"audio\">Audio</SelectItem>\n                                    <SelectItem value=\"image\">Image</SelectItem>\n                                    <SelectItem value=\"link\">External Link</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={form.control}\n                            name=\"subject\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Subject</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"e.g., Mathematics, English\" data-testid=\"input-resource-subject\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"class\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Class (Optional)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"e.g., SS 2\" data-testid=\"input-resource-class\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={form.control}\n                            name=\"fileSize\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>File Size (KB)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\" \n                                    {...field} \n                                    value={field.value || \"\"}\n                                    onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                                    data-testid=\"input-resource-file-size\" \n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"fileUrl\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>File URL or Upload</FormLabel>\n                              <FormControl>\n                                <div className=\"space-y-2\">\n                                  <Input {...field} placeholder=\"Enter file URL or upload file\" data-testid=\"input-resource-url\" />\n                                  <Button type=\"button\" variant=\"outline\" className=\"w-full\" data-testid=\"button-upload-file\">\n                                    <Upload className=\"w-4 h-4 mr-2\" />\n                                    Upload File\n                                  </Button>\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setIsUploadOpen(false)}>\n                            Cancel\n                          </Button>\n                          <Button type=\"submit\" disabled={uploadMutation.isPending} data-testid=\"button-submit-resource\">\n                            {uploadMutation.isPending ? \"Uploading...\" : \"Upload Resource\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Search and Filters */}\n            <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4 mb-6\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search resources...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-resources\"\n                />\n              </div>\n              \n              <div className=\"flex items-center space-x-4\">\n                <Select value={selectedType} onValueChange={setSelectedType}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-filter-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"pdf\">PDF</SelectItem>\n                    <SelectItem value=\"video\">Video</SelectItem>\n                    <SelectItem value=\"audio\">Audio</SelectItem>\n                    <SelectItem value=\"image\">Image</SelectItem>\n                    <SelectItem value=\"link\">Link</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={selectedSubject} onValueChange={setSelectedSubject}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-filter-subject\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Subjects</SelectItem>\n                    {subjects.map((subject: string) => (\n                      <SelectItem key={subject} value={subject}>\n                        {subject}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Resource Types Tabs */}\n            <Tabs value={selectedType} onValueChange={setSelectedType} className=\"mb-6\">\n              <TabsList>\n                <TabsTrigger value=\"all\">All ({resourceStats.total})</TabsTrigger>\n                <TabsTrigger value=\"pdf\">PDF ({resourceStats.pdf})</TabsTrigger>\n                <TabsTrigger value=\"video\">Video ({resourceStats.video})</TabsTrigger>\n                <TabsTrigger value=\"audio\">Audio ({resourceStats.audio})</TabsTrigger>\n                <TabsTrigger value=\"image\">Images ({resourceStats.image})</TabsTrigger>\n                <TabsTrigger value=\"link\">Links ({resourceStats.link})</TabsTrigger>\n              </TabsList>\n            </Tabs>\n\n            {/* Resources Display */}\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading resources...</div>\n            ) : filteredResources.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {searchQuery ? \"No resources found matching your search.\" : \"No resources available.\"}\n              </div>\n            ) : viewMode === \"grid\" ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {filteredResources.map((resource: Resource) => {\n                  const Icon = getTypeIcon(resource.type);\n                  return (\n                    <Card key={resource.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                            <Icon className=\"text-primary text-xl\" />\n                          </div>\n                          <Badge variant=\"outline\">\n                            {resource.type.toUpperCase()}\n                          </Badge>\n                        </div>\n                        \n                        <h4 className=\"font-semibold text-foreground mb-2 line-clamp-2\" data-testid={`text-resource-title-${resource.id}`}>\n                          {resource.title}\n                        </h4>\n                        \n                        <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`text-resource-description-${resource.id}`}>\n                          {resource.description || \"No description available\"}\n                        </p>\n                        \n                        <div className=\"space-y-2 mb-4\">\n                          {resource.subject && (\n                            <div className=\"text-xs\">\n                              <span className=\"font-medium\">Subject:</span> {resource.subject}\n                            </div>\n                          )}\n                          {resource.class && (\n                            <div className=\"text-xs\">\n                              <span className=\"font-medium\">Class:</span> {resource.class}\n                            </div>\n                          )}\n                          <div className=\"text-xs text-muted-foreground\">\n                            {resource.downloads || 0} downloads\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-preview-resource-${resource.id}`}>\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            Preview\n                          </Button>\n                          <Button size=\"sm\" data-testid={`button-download-resource-${resource.id}`}>\n                            <Download className=\"w-4 h-4 mr-1\" />\n                            Download\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredResources.map((resource: Resource) => {\n                  const Icon = getTypeIcon(resource.type);\n                  return (\n                    <div\n                      key={resource.id}\n                      className=\"flex items-center space-x-4 p-4 border border-border rounded-lg hover:shadow-sm transition-shadow\"\n                    >\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                        <Icon className=\"text-primary\" />\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold text-foreground\" data-testid={`text-resource-title-${resource.id}`}>\n                              {resource.title}\n                            </h4>\n                            <p className=\"text-sm text-muted-foreground mb-1\">\n                              {resource.description || \"No description available\"}\n                            </p>\n                            <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                              <span>{resource.subject}</span>\n                              {resource.class && <span>{resource.class}</span>}\n                              <span>{resource.downloads || 0} downloads</span>\n                              <span>{new Date(resource.createdAt).toLocaleDateString()}</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2 ml-4\">\n                            <Badge variant=\"outline\">\n                              {resource.type.toUpperCase()}\n                            </Badge>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-preview-resource-${resource.id}`}>\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            <Button size=\"sm\" data-testid={`button-download-resource-${resource.id}`}>\n                              <Download className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24952},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { TopNav } from \"@/components/top-nav\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Settings as SettingsIcon, \n  User, \n  Bell, \n  Palette, \n  School, \n  Shield,\n  Save,\n  Upload,\n  Download,\n  RefreshCw\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst profileFormSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\nconst schoolFormSchema = z.object({\n  schoolName: z.string().min(1, \"School name is required\"),\n  address: z.string().min(1, \"Address is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  website: z.string().optional(),\n  motto: z.string().optional(),\n  currentTerm: z.string(),\n  academicYear: z.string(),\n});\n\nconst notificationFormSchema = z.object({\n  emailNotifications: z.boolean(),\n  smsNotifications: z.boolean(),\n  pushNotifications: z.boolean(),\n  paymentReminders: z.boolean(),\n  examNotifications: z.boolean(),\n  announcementNotifications: z.boolean(),\n});\n\ntype ProfileFormData = z.infer<typeof profileFormSchema>;\ntype SchoolFormData = z.infer<typeof schoolFormSchema>;\ntype NotificationFormData = z.infer<typeof notificationFormSchema>;\n\nexport default function Settings() {\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const profileForm = useForm<ProfileFormData>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      email: user?.email || \"\",\n      phone: \"\",\n      address: \"\",\n    },\n  });\n\n  const schoolForm = useForm<SchoolFormData>({\n    resolver: zodResolver(schoolFormSchema),\n    defaultValues: {\n      schoolName: \"EduManage High School\",\n      address: \"123 Education Street, Academic City\",\n      phone: \"+234 800 123 4567\",\n      email: \"info@edumanage.edu.ng\",\n      website: \"https://www.edumanage.edu.ng\",\n      motto: \"Excellence in Education\",\n      currentTerm: \"First Term\",\n      academicYear: \"2024/2025\",\n    },\n  });\n\n  const notificationForm = useForm<NotificationFormData>({\n    resolver: zodResolver(notificationFormSchema),\n    defaultValues: {\n      emailNotifications: true,\n      smsNotifications: false,\n      pushNotifications: true,\n      paymentReminders: true,\n      examNotifications: true,\n      announcementNotifications: true,\n    },\n  });\n\n  const onProfileSubmit = (data: ProfileFormData) => {\n    toast({\n      title: \"Success\",\n      description: \"Profile updated successfully\",\n    });\n    console.log(\"Profile data:\", data);\n  };\n\n  const onSchoolSubmit = (data: SchoolFormData) => {\n    toast({\n      title: \"Success\",\n      description: \"School settings updated successfully\",\n    });\n    console.log(\"School data:\", data);\n  };\n\n  const onNotificationSubmit = (data: NotificationFormData) => {\n    toast({\n      title: \"Success\",\n      description: \"Notification preferences updated successfully\",\n    });\n    console.log(\"Notification data:\", data);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopNav title=\"Settings\" subtitle=\"Customize your school management system\" />\n      \n      <div className=\"p-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Profile</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"school\" className=\"flex items-center space-x-2\">\n              <School className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">School</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"flex items-center space-x-2\">\n              <Bell className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Notifications</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"appearance\" className=\"flex items-center space-x-2\">\n              <Palette className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Appearance</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n              <Shield className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Security</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Profile Settings */}\n          <TabsContent value=\"profile\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Profile Settings</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...profileForm}>\n                  <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-6\">\n                    <div className=\"flex items-center space-x-6 mb-6\">\n                      <div className=\"w-24 h-24 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <span className=\"text-3xl font-bold text-primary\">\n                          {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}\n                        </span>\n                      </div>\n                      <div>\n                        <Button variant=\"outline\" data-testid=\"button-change-avatar\">\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Change Avatar\n                        </Button>\n                        <p className=\"text-sm text-muted-foreground mt-2\">\n                          Upload a new profile picture\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={profileForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-first-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={profileForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-last-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={profileForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" {...field} data-testid=\"input-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={profileForm.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-phone\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={profileForm.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Address</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} rows={3} data-testid=\"textarea-address\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button type=\"submit\" data-testid=\"button-save-profile\">\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save Changes\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* School Settings */}\n          <TabsContent value=\"school\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <School className=\"w-5 h-5\" />\n                  <span>School Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...schoolForm}>\n                  <form onSubmit={schoolForm.handleSubmit(onSchoolSubmit)} className=\"space-y-6\">\n                    <FormField\n                      control={schoolForm.control}\n                      name=\"schoolName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>School Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-school-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={schoolForm.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>School Address</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} rows={3} data-testid=\"textarea-school-address\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={schoolForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone Number</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-school-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={schoolForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Address</FormLabel>\n                            <FormControl>\n                              <Input type=\"email\" {...field} data-testid=\"input-school-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={schoolForm.control}\n                      name=\"website\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Website</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-school-website\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={schoolForm.control}\n                      name=\"motto\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>School Motto</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-school-motto\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={schoolForm.control}\n                        name=\"currentTerm\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Current Term</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-current-term\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"First Term\">First Term</SelectItem>\n                                <SelectItem value=\"Second Term\">Second Term</SelectItem>\n                                <SelectItem value=\"Third Term\">Third Term</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={schoolForm.control}\n                        name=\"academicYear\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Academic Year</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-academic-year\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <Button type=\"submit\" data-testid=\"button-save-school\">\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save Changes\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notification Settings */}\n          <TabsContent value=\"notifications\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Bell className=\"w-5 h-5\" />\n                  <span>Notification Preferences</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...notificationForm}>\n                  <form onSubmit={notificationForm.handleSubmit(onNotificationSubmit)} className=\"space-y-6\">\n                    <div className=\"space-y-6\">\n                      <FormField\n                        control={notificationForm.control}\n                        name=\"emailNotifications\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Email Notifications</FormLabel>\n                              <FormDescription>\n                                Receive notifications via email\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-email-notifications\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={notificationForm.control}\n                        name=\"smsNotifications\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">SMS Notifications</FormLabel>\n                              <FormDescription>\n                                Receive notifications via SMS\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-sms-notifications\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={notificationForm.control}\n                        name=\"pushNotifications\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Push Notifications</FormLabel>\n                              <FormDescription>\n                                Receive push notifications in your browser\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-push-notifications\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={notificationForm.control}\n                        name=\"paymentReminders\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Payment Reminders</FormLabel>\n                              <FormDescription>\n                                Get notified about overdue payments\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-payment-reminders\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={notificationForm.control}\n                        name=\"examNotifications\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Exam Notifications</FormLabel>\n                              <FormDescription>\n                                Receive updates about exam schedules and results\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-exam-notifications\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={notificationForm.control}\n                        name=\"announcementNotifications\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-base\">Announcement Notifications</FormLabel>\n                              <FormDescription>\n                                Get notified about school announcements\n                              </FormDescription>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-announcement-notifications\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <Button type=\"submit\" data-testid=\"button-save-notifications\">\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save Preferences\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Appearance Settings */}\n          <TabsContent value=\"appearance\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Palette className=\"w-5 h-5\" />\n                  <span>Appearance</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <h4 className=\"text-lg font-medium mb-4\">Theme</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <Card className=\"cursor-pointer hover:shadow-md transition-shadow border-2 border-primary\">\n                      <CardContent className=\"p-4 text-center\">\n                        <div className=\"w-full h-20 bg-background border rounded mb-3\"></div>\n                        <p className=\"font-medium\">Light</p>\n                        <p className=\"text-sm text-muted-foreground\">Default light theme</p>\n                      </CardContent>\n                    </Card>\n                    \n                    <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-4 text-center\">\n                        <div className=\"w-full h-20 bg-slate-900 border rounded mb-3\"></div>\n                        <p className=\"font-medium\">Dark</p>\n                        <p className=\"text-sm text-muted-foreground\">Dark theme</p>\n                      </CardContent>\n                    </Card>\n                    \n                    <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-4 text-center\">\n                        <div className=\"w-full h-20 bg-gradient-to-r from-background to-slate-100 border rounded mb-3\"></div>\n                        <p className=\"font-medium\">Auto</p>\n                        <p className=\"text-sm text-muted-foreground\">System preference</p>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-lg font-medium mb-4\">Color Scheme</h4>\n                  <div className=\"grid grid-cols-4 gap-3\">\n                    {[\n                      { name: \"Blue\", color: \"bg-blue-500\" },\n                      { name: \"Green\", color: \"bg-green-500\" },\n                      { name: \"Purple\", color: \"bg-purple-500\" },\n                      { name: \"Orange\", color: \"bg-orange-500\" },\n                    ].map((color) => (\n                      <div\n                        key={color.name}\n                        className=\"cursor-pointer p-3 border rounded-lg hover:shadow-sm transition-shadow\"\n                        data-testid={`color-${color.name.toLowerCase()}`}\n                      >\n                        <div className={`w-full h-8 ${color.color} rounded mb-2`}></div>\n                        <p className=\"text-sm font-medium text-center\">{color.name}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <Button data-testid=\"button-save-appearance\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Apply Changes\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Security Settings */}\n          <TabsContent value=\"security\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"w-5 h-5\" />\n                  <span>Security Settings</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Two-Factor Authentication</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Add an extra layer of security to your account\n                      </p>\n                    </div>\n                    <Button variant=\"outline\" data-testid=\"button-enable-2fa\">\n                      Enable\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Active Sessions</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Manage your active login sessions\n                      </p>\n                    </div>\n                    <Button variant=\"outline\" data-testid=\"button-manage-sessions\">\n                      Manage\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Password</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Change your account password\n                      </p>\n                    </div>\n                    <Button variant=\"outline\" data-testid=\"button-change-password\">\n                      Change\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <h4 className=\"font-medium\">Export Data</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Download a copy of your data\n                      </p>\n                    </div>\n                    <Button variant=\"outline\" data-testid=\"button-export-data\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg border-destructive/20\">\n                    <div>\n                      <h4 className=\"font-medium text-destructive\">Delete Account</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Permanently delete your account and all data\n                      </p>\n                    </div>\n                    <Button variant=\"destructive\" data-testid=\"button-delete-account\">\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":30600},"client/src/pages/students.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { TopNav } from \"@/components/top-nav\";\nimport { StudentForm } from \"@/components/student-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { UserPlus, Search, MoreHorizontal, Edit, Trash2, Eye } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Student } from \"@shared/schema\";\n\nexport default function Students() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: students, isLoading } = useQuery({\n    queryKey: [\"/api/students\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/students/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/students\"] });\n      toast({\n        title: \"Success\",\n        description: \"Student deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete student\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredStudents = students?.filter((student: Student) =>\n    `${student.firstName} ${student.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    student.studentId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    student.class.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  const handleAddStudent = () => {\n    setSelectedStudent(null);\n    setIsFormOpen(true);\n  };\n\n  const handleEditStudent = (student: Student) => {\n    setSelectedStudent(student);\n    setIsFormOpen(true);\n  };\n\n  const handleDeleteStudent = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this student?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <TopNav title=\"Students\" subtitle=\"Manage student records and information\" />\n      \n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Student Management</CardTitle>\n              <Button onClick={handleAddStudent} data-testid=\"button-add-student\">\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Add Student\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Search and Filters */}\n            <div className=\"flex items-center space-x-4 mb-6\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search students...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-students\"\n                />\n              </div>\n            </div>\n\n            {/* Students Table */}\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading students...</div>\n            ) : filteredStudents.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {searchQuery ? \"No students found matching your search.\" : \"No students found.\"}\n              </div>\n            ) : (\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Student ID</TableHead>\n                      <TableHead>Class</TableHead>\n                      <TableHead>Contact</TableHead>\n                      <TableHead>Parent/Guardian</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredStudents.map((student: Student) => (\n                      <TableRow key={student.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <span className=\"text-primary font-medium text-sm\">\n                                {student.firstName?.charAt(0)}{student.lastName?.charAt(0)}\n                              </span>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`text-student-name-${student.id}`}>\n                                {student.firstName} {student.lastName}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {student.email}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell data-testid={`text-student-id-${student.id}`}>\n                          {student.studentId}\n                        </TableCell>\n                        <TableCell data-testid={`text-student-class-${student.id}`}>\n                          {student.class}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <p>{student.phone}</p>\n                            <p className=\"text-muted-foreground\">{student.email}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <p>{student.parentName}</p>\n                            <p className=\"text-muted-foreground\">{student.parentPhone}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={student.status === 'active' ? 'default' : 'secondary'}\n                            className={\n                              student.status === 'active' \n                                ? 'bg-secondary/10 text-secondary' \n                                : student.status === 'suspended'\n                                ? 'bg-destructive/10 text-destructive'\n                                : 'bg-accent/10 text-accent'\n                            }\n                            data-testid={`badge-student-status-${student.id}`}\n                          >\n                            {student.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button \n                                variant=\"ghost\" \n                                className=\"h-8 w-8 p-0\"\n                                data-testid={`button-student-actions-${student.id}`}\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem data-testid={`button-view-student-${student.id}`}>\n                                <Eye className=\"mr-2 h-4 w-4\" />\n                                View Details\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleEditStudent(student)}\n                                data-testid={`button-edit-student-${student.id}`}\n                              >\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                Edit\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleDeleteStudent(student.id)}\n                                className=\"text-destructive\"\n                                data-testid={`button-delete-student-${student.id}`}\n                              >\n                                <Trash2 className=\"mr-2 h-4 w-4\" />\n                                Delete\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <StudentForm\n        open={isFormOpen}\n        onOpenChange={setIsFormOpen}\n        student={selectedStudent}\n      />\n    </div>\n  );\n}\n","size_bytes":9705},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}